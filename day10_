{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"provenance":[],"toc_visible":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# 프로젝트: 한국어 데이터로 챗봇 만들기","metadata":{"id":"G0kpxFS1RFpm"}},{"cell_type":"code","source":"import tensorflow as tf\n\nprint(tf.__version__)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QqVqPHf2Q64L","outputId":"c191350d-825d-421e-a253-fee7cae342c1","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:31.903950Z","iopub.execute_input":"2025-10-14T14:42:31.904600Z","iopub.status.idle":"2025-10-14T14:42:35.733165Z","shell.execute_reply.started":"2025-10-14T14:42:31.904574Z","shell.execute_reply":"2025-10-14T14:42:35.732239Z"}},"outputs":[{"name":"stderr","text":"2025-10-14 14:42:32.194300: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1760452952.216877    9502 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1760452952.223736    9502 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"},{"name":"stdout","text":"2.18.0\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"과정 개요\n___\n\nStep 1. 데이터 수집하기\n- 한국어 챗봇 데이터는 [송영숙님이 공개한 챗봇 데이터](https://github.com/songys/Chatbot_data/blob/master/ChatbotData.csv)를 사용합니다.\n\nStep 2. 데이터 전처리하기\n- 영어 데이터와는 전혀 다른 데이터인 만큼 영어 데이터에 사용했던 전처리와 일부 동일한 전처리도 필요하겠지만 전체적으로는 다른 전처리를 수행해야 할 수도 있습니다.\n\nStep 3. SubwordTextEncoder 사용하기\n- 한국어 데이터는 형태소 분석기를 사용하여 토크나이징을 해야 한다고 많은 분이 알고 있습니다. 하지만 여기서는 형태소 분석기가 아닌 위 실습에서 사용했던 내부 단어 토크나이저인 SubwordTextEncoder를 그대로 사용해보세요.\n\nStep 4. 모델 구성하기\n- 위 실습 내용을 참고하여 트랜스포머 모델을 구현합니다.\n\nStep 5. 모델 평가하기\n- Step 1에서 선택한 전처리 방법을 고려하여 입력된 문장에 대해서 대답을 얻는 예측 함수를 만듭니다.","metadata":{"id":"MluypzgzRTQE"}},{"cell_type":"markdown","source":"## Step 1. 데이터 수집하기\n- 한국어 챗봇 데이터는 [송영숙님이 공개한 챗봇 데이터](https://github.com/songys/Chatbot_data/blob/master/ChatbotData.csv)를 사용합니다.","metadata":{"id":"gMVEWiNHUSg6"}},{"cell_type":"code","source":"# 데이터 받아오기\n!wget https://raw.githubusercontent.com/songys/Chatbot_data/master/ChatbotData.csv\n\nimport pandas as pd\n\nchatbot_data = pd.read_csv('ChatbotData.csv')\ndisplay(chatbot_data.head())","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":408},"id":"_mUUfxAJTuYh","outputId":"5387f55c-0e72-4ddf-e279-a5a6edfd8ee1","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:35.734730Z","iopub.execute_input":"2025-10-14T14:42:35.735472Z","iopub.status.idle":"2025-10-14T14:42:36.014700Z","shell.execute_reply.started":"2025-10-14T14:42:35.735451Z","shell.execute_reply":"2025-10-14T14:42:36.013976Z"}},"outputs":[{"name":"stdout","text":"--2025-10-14 14:42:35--  https://raw.githubusercontent.com/songys/Chatbot_data/master/ChatbotData.csv\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.110.133, 185.199.111.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 889842 (869K) [text/plain]\nSaving to: ‘ChatbotData.csv.11’\n\nChatbotData.csv.11  100%[===================>] 868.99K  --.-KB/s    in 0.05s   \n\n2025-10-14 14:42:35 (18.8 MB/s) - ‘ChatbotData.csv.11’ saved [889842/889842]\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"                 Q            A  label\n0           12시 땡!   하루가 또 가네요.      0\n1      1지망 학교 떨어졌어    위로해 드립니다.      0\n2     3박4일 놀러가고 싶다  여행은 언제나 좋죠.      0\n3  3박4일 정도 놀러가고 싶다  여행은 언제나 좋죠.      0\n4          PPL 심하네   눈살이 찌푸려지죠.      0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Q</th>\n      <th>A</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12시 땡!</td>\n      <td>하루가 또 가네요.</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1지망 학교 떨어졌어</td>\n      <td>위로해 드립니다.</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3박4일 놀러가고 싶다</td>\n      <td>여행은 언제나 좋죠.</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3박4일 정도 놀러가고 싶다</td>\n      <td>여행은 언제나 좋죠.</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>PPL 심하네</td>\n      <td>눈살이 찌푸려지죠.</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"# 쳇봇데이터 크기\nchatbot_data.shape","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_wlnT1okUbt9","outputId":"0db921df-9938-45ee-d535-3230cb78c365","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:36.015538Z","iopub.execute_input":"2025-10-14T14:42:36.015851Z","iopub.status.idle":"2025-10-14T14:42:36.021418Z","shell.execute_reply.started":"2025-10-14T14:42:36.015808Z","shell.execute_reply":"2025-10-14T14:42:36.020532Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"(11823, 3)"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"# 문장 길이 분포\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(14,6))\nplt.subplot(121)\nchatbot_data.Q.apply(lambda x: len(x)).plot(kind='hist', title='Distribution of sentence length of Q')\n\nplt.subplot(122)\nchatbot_data.A.apply(lambda x: len(x)).plot(kind='hist', title='Distribution of sentence length of A')","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"2IZl8lGUUoz1","outputId":"3ab9a343-f822-4d9c-cb7f-df1e0df7fd2a","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:36.022440Z","iopub.execute_input":"2025-10-14T14:42:36.022686Z","iopub.status.idle":"2025-10-14T14:42:36.397442Z","shell.execute_reply.started":"2025-10-14T14:42:36.022667Z","shell.execute_reply":"2025-10-14T14:42:36.396754Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"<Axes: title={'center': 'Distribution of sentence length of A'}, ylabel='Frequency'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1400x600 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":4},{"cell_type":"markdown","source":"## Step 2. 데이터 전처리하기\n- 원활한 토큰화 작업을 위한 데이터 전처리 작업을 수행하였습니다.\n- 세부 내용\n  - `양쪽 공백 제거`, `다양한 형태의 구두점 통일`, `연속되는 문장 부호 처리`, `특수문자 제거`, `문장 부호 주위 공백 추가`, `연속 공백 처리` 등\n","metadata":{"id":"oPZpyRr9UXrw"}},{"cell_type":"markdown","source":"### check_varied_punctuation(sentence)","metadata":{"id":"6jCx5GPa0Tdw"}},{"cell_type":"code","source":"# 다양한 형태의 구두점 포함 여부 확인 함수\nimport re\n\ndef check_varied_punctuation(sentence):\n    # 다양한 형태의 따옴표, 대시, 줄임표 등을 찾는 패턴\n    varied_punctuation_pattern = r\"['\\\"`‘’“”‒–—―~…]\"\n    return re.search(varied_punctuation_pattern, sentence) is not None\n\n# 데이터셋에서 다양한 형태의 구두점이 포함된 문장 예시 출력\nprint(\"구두점 확인 Q column:\")\ncount_q = 0\nfor sentence in chatbot_data['Q']:\n    if check_varied_punctuation(sentence):\n        print(f\"Q: {sentence}\")\n\nprint(\"\\n구두점 확인 A column:\")\ncount_a = 0\nfor sentence in chatbot_data['A']:\n    if check_varied_punctuation(sentence):\n        print(f\"A: {sentence}\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tx6BVoJnlXUD","outputId":"ff5a54a0-29f4-401f-e0d9-b6058af08d97","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:36.398441Z","iopub.execute_input":"2025-10-14T14:42:36.399098Z","iopub.status.idle":"2025-10-14T14:42:36.423166Z","shell.execute_reply.started":"2025-10-14T14:42:36.399074Z","shell.execute_reply":"2025-10-14T14:42:36.422402Z"}},"outputs":[{"name":"stdout","text":"구두점 확인 Q column:\nQ: 나는 좋은데 ….\nQ: 떠나요~ 제주도~\nQ: 바람쐬러 정동진가~~\nQ: 스트레스~\nQ: 와인 한잔 짠~\nQ: 으으~ 떨린다\nQ: 15년…안녕\nQ: 같이 보고싶어서 올려~\nQ: 나는 좋은데 ….\nQ: 비많이오네~\nQ: 삼십대를 훌러덩~~~~\nQ: 소식이 궁금해~\nQ: 속시원해~~안녕 잘가~~~\nQ: 아휴~ 싱숭생숭한 하루\nQ: 여자친구 만나고왔어~\nQ: 오늘도출근해~\nQ: 완전히 끝났어~\nQ: 요즘은 솔로인게 좋네~!!\nQ: 윤종신 '좋니' 노래 가사가 엄청 와닿네\nQ: 이것 또한 받아들이는 것이겠죠~??\nQ: 이런 여자.이런남자.안대용~\nQ: 이야기를 한번 해보려 합니다~\nQ: 자야하는데~~\nQ: 점심시간잠깐 그녀가 저에게 했던 말들이 떠오르네~ㅠㅠ\nQ: 카톡프로필~~~보고왔는데.\nQ: 퇴근했어~근데\nQ: 헤어진지 3주차 넘어가네~\nQ: 헤어진지 6개월여~\nQ: 휴~~ 이제 글쓰는것도 멈춰야 할까\nQ: 흐잌~~ 불금이닷~~ㅠㅠ\nQ: 사귀는 사이인데 '야'라고 해. 기분 나쁜데 어떡해?\n\n구두점 확인 A column:\nA: 밥 사줄 친구를 찾아 보세요~\nA: 밥 사줄 친구를 찾아 보세요~\nA: 시원한 물이라도 한 잔 드세요~\nA: 시원한 물이라도 한 잔 드세요~\nA: 퍼가요~\nA: 퍼가요~\nA: 음~ 곰곰히 생각해보세요.\nA: 음~ 곰곰히 생각해보세요.\nA: 뭘 다운 받으신 건지…\nA: 뭘 다운 받으신 건지…\nA: 으아~ 충전하세요.\nA: 으아~ 충전하세요.\nA: 워워~ 진정하세요.\nA: 저는 '설레'라고 저장할래요.\nA: 잘자요', '내일도 보고싶어요' 라고 하는 건 어떨까요?\nA: 애들아~ 여기 깨 쏟아진다.\nA: 꺼진 사랑도 다시 보자~ 다시 타오를수도 있어요.\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"위 결과를 토대로 전처리 함수(`preprocess_sentence`)를 구성하였습니다. ","metadata":{}},{"cell_type":"markdown","source":"### preprocess_sentence(sentence)","metadata":{"id":"2FeWEyLZ0N34"}},{"cell_type":"code","source":"# 데이터 전처리 함수 정의\nimport re\n\ndef preprocess_sentence(sentence):\n    # 1. 기본 공백 제거\n    sentence = sentence.strip()\n\n    # 2. 따옴표, 대시 통일\n    sentence = re.sub(r\"['\\\"`‘’“”]\", \"'\", sentence)\n    sentence = re.sub(r\"[‒–—―]\", \"-\", sentence)\n\n    # 3. 구두점 반복 통일\n    sentence = re.sub(r\"[.!?~]+\", lambda m: m.group(0)[0], sentence)\n\n    # sentence = re.sub(r\"[.]+\", \".\", sentence) # .. → .\n    # sentence = re.sub(r\"[?]+\", \"?\", sentence) # ?? → ?\n    # sentence = re.sub(r\"[~]+\", \"~\", sentence) # ~~ → ~\n    # sentence = re.sub(r\"[!]+\", \"!\", sentence) # !! → !\n    \n    # 4. 특수문자 제거\n    # 허용된 문장 부호: 마침표, 물음표, 느낌표, 쉼표, 작은따옴표, 하이픈\n    sentence = re.sub(r\"[^가-힣a-zA-Z0-9?.!, '\\-]+\", \" \", sentence)\n\n    # 5. 영어/숫자 변환\n    sentence = re.sub(r\"[0-9]+\", \"<NUM>\", sentence)\n    sentence = re.sub(r\"[a-zA-Z]{5,}\", \"<ENG>\", sentence)\n    \n    # 5. 문장부호 주변 공백 추가 (학습을 위한 토큰 분리)\n    sentence = re.sub(r\"([?.!,~])\", r\" \\1 \", sentence)\n    sentence = re.sub(r\"\\s+([?.!,~])\", r\"\\1\", sentence)\n    \n    # 6. 감정 표현 토큰화\n    sentence = re.sub(r\"(ㅋㅋ+|ㅎㅎ+|ㅠ+|ㅜ+)\", lambda m: m.group(1)[0:2], sentence) \n    sentence = re.sub(r\"(ㅠ+|ㅜ+|ㅋㅋ+|ㅎㅎ+)\", r\" \\1 \", sentence)\n\n    # 7. 공백 정리\n    sentence = re.sub(r\"\\s*\\.\\s*\", \" . \", sentence)\n    sentence = re.sub(r'[\" \"]+', \" \", sentence).strip()\n\n    return sentence","metadata":{"id":"4_UwZmxbhTvF","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:36.424124Z","iopub.execute_input":"2025-10-14T14:42:36.424348Z","iopub.status.idle":"2025-10-14T14:42:36.430394Z","shell.execute_reply.started":"2025-10-14T14:42:36.424332Z","shell.execute_reply":"2025-10-14T14:42:36.429795Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"# 'Q' 와 'A' 열에 전처리 함수 적용\nchatbot_data['Q'] = chatbot_data['Q'].apply(preprocess_sentence)\nchatbot_data['A'] = chatbot_data['A'].apply(preprocess_sentence)\n\ndisplay(chatbot_data.head())","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"4174129b","outputId":"41f28884-0cde-4a89-e7c8-1c1f09b3f330","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:36.431177Z","iopub.execute_input":"2025-10-14T14:42:36.431471Z","iopub.status.idle":"2025-10-14T14:42:36.844891Z","shell.execute_reply.started":"2025-10-14T14:42:36.431454Z","shell.execute_reply":"2025-10-14T14:42:36.844232Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"                         Q             A  label\n0                <NUM>시 땡!   하루가 또 가네요 .      0\n1          <NUM>지망 학교 떨어졌어    위로해 드립니다 .      0\n2     <NUM>박<NUM>일 놀러가고 싶다  여행은 언제나 좋죠 .      0\n3  <NUM>박<NUM>일 정도 놀러가고 싶다  여행은 언제나 좋죠 .      0\n4                  PPL 심하네   눈살이 찌푸려지죠 .      0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Q</th>\n      <th>A</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>&lt;NUM&gt;시 땡!</td>\n      <td>하루가 또 가네요 .</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>&lt;NUM&gt;지망 학교 떨어졌어</td>\n      <td>위로해 드립니다 .</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>&lt;NUM&gt;박&lt;NUM&gt;일 놀러가고 싶다</td>\n      <td>여행은 언제나 좋죠 .</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>&lt;NUM&gt;박&lt;NUM&gt;일 정도 놀러가고 싶다</td>\n      <td>여행은 언제나 좋죠 .</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>PPL 심하네</td>\n      <td>눈살이 찌푸려지죠 .</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"# 다양한 형태의 구두점 포함 여부 확인 함수\nimport re\n\n# 데이터셋에서 다양한 형태의 구두점이 포함된 문장 예시 출력\nprint(\"구두점 확인 Q column:\")\ncount_q = 0\nfor sentence in chatbot_data['Q']:\n    if check_varied_punctuation(sentence):\n        print(f\"Q: {sentence}\")\n\nprint(\"\\n구두점 확인 A column:\")\ncount_a = 0\nfor sentence in chatbot_data['A']:\n    if check_varied_punctuation(sentence):\n        print(f\"A: {sentence}\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ye4PpUdltK2H","outputId":"870f4726-f9bf-476e-93ad-96d522ade561","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:36.847306Z","iopub.execute_input":"2025-10-14T14:42:36.847527Z","iopub.status.idle":"2025-10-14T14:42:36.869037Z","shell.execute_reply.started":"2025-10-14T14:42:36.847509Z","shell.execute_reply":"2025-10-14T14:42:36.868237Z"}},"outputs":[{"name":"stdout","text":"구두점 확인 Q column:\nQ: 윤종신 '좋니' 노래 가사가 엄청 와닿네\nQ: 사귀는 사이인데 '야'라고 해 . 기분 나쁜데 어떡해?\n\n구두점 확인 A column:\nA: 저는 '설레'라고 저장할래요 .\nA: 잘자요', '내일도 보고싶어요' 라고 하는 건 어떨까요?\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"# 질문을 questions, 답변을 answers에 저장\nquestions = chatbot_data['Q'].tolist()\nanswers = chatbot_data['A'].tolist()\n\nprint('questions 샘플 수 :', len(questions))\nprint('answers 샘플 수 :', len(answers))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oIcB3qNlhyz1","outputId":"e6238c04-b7ae-4af5-8b2b-8ee89cfc3b97","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:36.869922Z","iopub.execute_input":"2025-10-14T14:42:36.870538Z","iopub.status.idle":"2025-10-14T14:42:36.882714Z","shell.execute_reply.started":"2025-10-14T14:42:36.870512Z","shell.execute_reply":"2025-10-14T14:42:36.882121Z"}},"outputs":[{"name":"stdout","text":"questions 샘플 수 : 11823\nanswers 샘플 수 : 11823\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"print('전처리 후 질문 샘플: {}'.format(questions[11810]))\nprint('전처리 후 답변 샘플: {}'.format(answers[11810]))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xg9OTfC-h9sl","outputId":"5a10edc0-cb38-4820-a235-e5cc6b419cb9","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:36.883416Z","iopub.execute_input":"2025-10-14T14:42:36.883619Z","iopub.status.idle":"2025-10-14T14:42:36.894432Z","shell.execute_reply.started":"2025-10-14T14:42:36.883604Z","shell.execute_reply":"2025-10-14T14:42:36.893707Z"}},"outputs":[{"name":"stdout","text":"전처리 후 질문 샘플: 확실히 좋아하는 데도 관심 있는거 티 안내려고 선톡 안하고 일부러 늦게 보내고 그러는 사람도 있어요?\n전처리 후 답변 샘플: 많이 있어요 .\n","output_type":"stream"}],"execution_count":10},{"cell_type":"markdown","source":"## Step 3. SubwordTextEncoder 사용하기\n- `단어장 만들기(SubwordTextEncoder 활용)`, `시작/종료 토큰 추가`\n- `정수 인코딩(tokenizer.encode 활용) 및 패딩`\n- `교사강요를 위한 데이터셋 준비`","metadata":{"id":"463e3c5e"}},{"cell_type":"markdown","source":"### 단어장 만들기\n","metadata":{"id":"T8sHpac9A2_Z"}},{"cell_type":"code","source":"# SubwordTextEncoder 활용 토큰화\nimport tensorflow_datasets as tfds\nimport tensorflow as tf\n\n# 질문과 답변 데이터를 합쳐서 단어 사전을 만듭니다.\ntokenizer = tfds.deprecated.text.SubwordTextEncoder.build_from_corpus(\n    questions + answers, target_vocab_size=2**13)\n\n# 시작 토큰과 종료 토큰 추가\nSTART_TOKEN, END_TOKEN = [tokenizer.vocab_size], [tokenizer.vocab_size + 1]\n\n# 시작 토큰과 종료 토큰을 고려하여 +2를 하여 단어장의 크기를 산정합니다.\nVOCAB_SIZE = tokenizer.vocab_size + 2\n\nprint('START_TOKEN의 번호 :' ,[tokenizer.vocab_size])\nprint('END_TOKEN의 번호 :' ,[tokenizer.vocab_size + 1])\nprint(f'단어 사전 크기: {VOCAB_SIZE}')","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"46a77298","outputId":"7de15cc4-6081-42cf-fcbf-9cce76b36402","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:36.895221Z","iopub.execute_input":"2025-10-14T14:42:36.895796Z","iopub.status.idle":"2025-10-14T14:42:46.561907Z","shell.execute_reply.started":"2025-10-14T14:42:36.895780Z","shell.execute_reply":"2025-10-14T14:42:46.561140Z"}},"outputs":[{"name":"stdout","text":"START_TOKEN의 번호 : [8130]\nEND_TOKEN의 번호 : [8131]\n단어 사전 크기: 8132\n","output_type":"stream"}],"execution_count":11},{"cell_type":"markdown","source":"### 정수 인코딩 및 패딩 적용\n","metadata":{"id":"STIBfc67A67W"}},{"cell_type":"code","source":"# 정수 인코딩 및 디코딩: 샘플 테스트\nsample_string = questions[20]\nencoded_string = tokenizer.encode(sample_string)\n\nprint(f'Original string: {sample_string}')\nprint(f'Encoded string: {encoded_string}')\n\n# 인코딩된 문자열을 다시 디코딩하여 확인\ndecoded_string = tokenizer.decode(encoded_string)\nprint(f'Decoded string: {decoded_string}')","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a649ef93","outputId":"57871381-d6ef-4ede-97c1-7de1eafac92b","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:46.562754Z","iopub.execute_input":"2025-10-14T14:42:46.563058Z","iopub.status.idle":"2025-10-14T14:42:46.568266Z","shell.execute_reply.started":"2025-10-14T14:42:46.563033Z","shell.execute_reply":"2025-10-14T14:42:46.567488Z"}},"outputs":[{"name":"stdout","text":"Original string: 가스비 비싼데 감기 걸리겠어\nEncoded string: [5745, 611, 3500, 141, 685, 3735, 844]\nDecoded string: 가스비 비싼데 감기 걸리겠어\n","output_type":"stream"}],"execution_count":12},{"cell_type":"markdown","source":"#### tokenize_and_filter(inputs, outputs)","metadata":{"id":"yLO4Qdko8hDz"}},{"cell_type":"code","source":"# 정수 인코딩 및 패딩 함수\ndef tokenize_and_filter(inputs, outputs):\n    encoded_inputs = [START_TOKEN + tokenizer.encode(sentence) + END_TOKEN for sentence in inputs]\n    encoded_outputs = [START_TOKEN + tokenizer.encode(sentence) + END_TOKEN for sentence in outputs]\n\n    # 패딩을 위해 최대 길이 계산\n    max_length = max(max(len(x) for x in encoded_inputs), max(len(x) for x in encoded_outputs))\n\n    # 패딩 추가\n    padded_inputs = tf.keras.preprocessing.sequence.pad_sequences(\n        encoded_inputs, maxlen=max_length, padding='post')\n\n    padded_outputs = tf.keras.preprocessing.sequence.pad_sequences(\n        encoded_outputs, maxlen=max_length, padding='post')\n\n    return padded_inputs, padded_outputs, max_length","metadata":{"id":"_2E5AUqv8tTp","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:46.569287Z","iopub.execute_input":"2025-10-14T14:42:46.569899Z","iopub.status.idle":"2025-10-14T14:42:46.585216Z","shell.execute_reply.started":"2025-10-14T14:42:46.569880Z","shell.execute_reply":"2025-10-14T14:42:46.584594Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"questions_encoded, answers_encoded, max_sequence_length = tokenize_and_filter(questions, answers)\n\nprint(f'질문 데이터 shape: {questions_encoded.shape}')\nprint(f'답변 데이터 shape: {answers_encoded.shape}')\nprint(f'최대 시퀀스 길이: {max_sequence_length}')","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"feda6a4f","outputId":"57afe8c0-b4dc-4aa4-d178-69951c823a29","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:46.585935Z","iopub.execute_input":"2025-10-14T14:42:46.586108Z","iopub.status.idle":"2025-10-14T14:42:47.239879Z","shell.execute_reply.started":"2025-10-14T14:42:46.586093Z","shell.execute_reply":"2025-10-14T14:42:47.239037Z"}},"outputs":[{"name":"stdout","text":"질문 데이터 shape: (11823, 31)\n답변 데이터 shape: (11823, 31)\n최대 시퀀스 길이: 31\n","output_type":"stream"}],"execution_count":14},{"cell_type":"markdown","source":"### 교사강요를 위한 데이터셋 준비","metadata":{"id":"TyA9fJRAA_qr"}},{"cell_type":"code","source":"BATCH_SIZE = 64\n\n# 인코더 입력: 질문 시퀀스 (questions_encoded)\n# 디코더 입력: 답변 시퀀스 (answers_encoded의 첫 번째 토큰부터 마지막 토큰 전까지)\n# 디코더 출력: 답변 시퀀스 (answers_encoded의 두 번째 토큰부터 마지막 토큰까지)\n\n# 데이터셋 생성\ndataset = tf.data.Dataset.from_tensor_slices((\n    {\n        \"inputs\": questions_encoded,\n        \"dec_inputs\": answers_encoded[:, :-1]\n    },\n    answers_encoded[:, 1:]\n))\n\ndataset = dataset.cache()\ndataset = dataset.shuffle(len(questions_encoded))\ndataset = dataset.batch(BATCH_SIZE)\ndataset = dataset.prefetch(tf.data.AUTOTUNE)\n\nprint(f'Dataset created with batch size: {BATCH_SIZE}')\nprint(f'Number of batches: {tf.data.experimental.cardinality(dataset).numpy()}')","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K6Lk97hrAeZ8","outputId":"31e14e74-ecd6-4005-8e2a-555fefd4be3f","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:47.240739Z","iopub.execute_input":"2025-10-14T14:42:47.241025Z","iopub.status.idle":"2025-10-14T14:42:47.610521Z","shell.execute_reply.started":"2025-10-14T14:42:47.240998Z","shell.execute_reply":"2025-10-14T14:42:47.609828Z"}},"outputs":[{"name":"stdout","text":"Dataset created with batch size: 64\nNumber of batches: 185\n","output_type":"stream"},{"name":"stderr","text":"I0000 00:00:1760452967.567887    9502 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\nI0000 00:00:1760452967.568520    9502 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n","output_type":"stream"}],"execution_count":15},{"cell_type":"markdown","source":"## Step 4. 모델 구성하기 (Keras 내장 레이어 활용)\n\n- 분석 프로젝트의 효율성을 위해 Keras 내장 레이어를 사용하여 트랜스포머 모델을 다시 구성합니다.\n","metadata":{"id":"c5b7ac4d"}},{"cell_type":"markdown","source":"### 트랜스포머 모델에 필요한 함수 및 레이어 정의\n- 어텐션 메커니즘, 마스크 생성, 포지셔널 인코딩 등 트랜스포머 모델 구축에 필요한 핵심 함수와 커스텀 레이어를 정의합니다.\n- 세부 내용\n  - `PositionalEncoding`, `mark` 는 학습노드 소스를 참조\n  - `Encoder`와 `Decoder` 내 MultiHeadAttention은 `tf.keras.layers.MultiHeadAttention` 활용\n    - `scaled_dot_product_attention` 연산은 위 레이어 내부 로직에 포함되어 있으므로 별도 구현하지 않음\n\n","metadata":{"id":"wg4In6Ktan1e"}},{"cell_type":"markdown","source":"#### PositionalEncoding","metadata":{"id":"7LTVISDACZxI"}},{"cell_type":"code","source":"class PositionalEncoding(tf.keras.layers.Layer):\n    def __init__(self, position, d_model):\n        super(PositionalEncoding, self).__init__()\n        self.pos_encoding = self.positional_encoding(position, d_model)\n\n    def get_angles(self, position, i, d_model):\n        angle_rates = 1 / tf.pow(10000.0, (2 * (i // 2)) / tf.cast(d_model, tf.float32))\n        return position * angle_rates\n\n    def positional_encoding(self, position, d_model):\n        # position: (position, 1)\n        # i: (1, d_model)\n        angle_rads = self.get_angles(\n            position=tf.cast(tf.range(position)[:, tf.newaxis], tf.float32),\n            i=tf.cast(tf.range(d_model)[tf.newaxis, :], tf.float32),\n            d_model=d_model\n        )\n\n        # 짝수 인덱스에는 sin, 홀수 인덱스에는 cos\n        sines = tf.math.sin(angle_rads[:, 0::2])\n        cosines = tf.math.cos(angle_rads[:, 1::2])\n\n        # sin과 cosine이 교차되도록 재배열\n        pos_encoding = tf.stack([sines, cosines], axis=0)\n        pos_encoding = tf.transpose(pos_encoding,[1, 2, 0])\n        pos_encoding = tf.reshape(pos_encoding, [position, d_model])\n        \n        # 배치에 더해질 수 있도록 [1, position, d_model]로 reshape\n        pos_encoding = pos_encoding[tf.newaxis, ...]\n\n        return tf.cast(pos_encoding, tf.float32)\n\n    def call(self, inputs):\n        # SparseTensor → Dense 변환 (필요시)\n        if isinstance(inputs, tf.SparseTensor):\n            inputs = tf.sparse.to_dense(inputs)\n\n        seq_len = tf.shape(inputs)[1]\n        return inputs + self.pos_encoding[:, :seq_len, :]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:47.611343Z","iopub.execute_input":"2025-10-14T14:42:47.611629Z","iopub.status.idle":"2025-10-14T14:42:47.619211Z","shell.execute_reply.started":"2025-10-14T14:42:47.611605Z","shell.execute_reply":"2025-10-14T14:42:47.618426Z"}},"outputs":[],"execution_count":16},{"cell_type":"markdown","source":"#### mask","metadata":{"id":"2tLETibkK-vS"}},{"cell_type":"code","source":"import tensorflow as tf\n\n# 패딩 마스크\ndef create_padding_mask(x):\n    # x: (batch_size, seq_len)\n    mask = tf.cast(tf.math.equal(x, 0), tf.float32)\n    # shape: (batch_size, 1, 1, seq_len) for broadcasting in attention\n    return mask[:, tf.newaxis, tf.newaxis, :]\n\n# 룩 어헤드 마스크 + 패딩 마스크\ndef create_look_ahead_mask(x):\n    seq_len = tf.shape(x)[1]\n    # look ahead mask: (seq_len, seq_len)\n    look_ahead_mask = 1 - tf.linalg.band_part(tf.ones((seq_len, seq_len)), -1, 0)\n    look_ahead_mask = look_ahead_mask[tf.newaxis, tf.newaxis, :, :]  # (1, 1, seq_len, seq_len)\n    \n    # padding mask: (batch_size, 1, 1, seq_len)\n    padding_mask = create_padding_mask(x)\n    \n    # combine: broadcast padding_mask to match look_ahead_mask shape\n    # padding_mask: (batch_size, 1, 1, seq_len) → (batch_size, 1, seq_len, seq_len)\n    padding_mask = tf.broadcast_to(padding_mask, [tf.shape(x)[0], 1, seq_len, seq_len])\n    \n    # 최종 마스크\n    combined_mask = tf.maximum(look_ahead_mask, padding_mask)\n    return combined_mask","metadata":{"id":"xLsYlO23CfBG","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:47.620099Z","iopub.execute_input":"2025-10-14T14:42:47.620372Z","iopub.status.idle":"2025-10-14T14:42:47.633975Z","shell.execute_reply.started":"2025-10-14T14:42:47.620348Z","shell.execute_reply":"2025-10-14T14:42:47.633277Z"}},"outputs":[],"execution_count":17},{"cell_type":"markdown","source":"### 트랜스포머 모델 정의\n- 인코더와 디코더를 포함하는 전체 트랜스포머 모델 아키텍처를 정의합니다.","metadata":{"id":"AHAZRazZbDlu"}},{"cell_type":"markdown","source":"#### Encoder","metadata":{"id":"gXjJW3PrMFBj"}},{"cell_type":"code","source":"class EncoderLayer(tf.keras.layers.Layer):\n    def __init__(self, d_model, num_heads, dff, rate=0.1):\n        \"\"\"\n        트랜스포머 인코더의 단일 레이어를 정의합니다. Keras 내장 레이어를 활용합니다.\n\n        Args:\n            d_model: 모델의 임베딩 차원.\n            num_heads: 멀티 헤드 어텐션의 헤드 개수.\n            dff: 피드포워드 네트워크의 내부 차원.\n            rate: 드롭아웃 비율.\n        \"\"\"\n        \n        super(EncoderLayer, self).__init__()\n\n        # 첫 번째 레이어: 멀티 헤드 셀프 어텐션\n        # `scaled_dot_product_attention` 연산은 MultiHeadAttention 레이어 내부 로직에 포함되어 있으므로 별도 구현하지 않음\n        self.mha = tf.keras.layers.MultiHeadAttention(num_heads=num_heads, key_dim=d_model//num_heads)\n    \n        # 두 번째 레이어: 피드포워드 (2개의 Dense 레이어로 구성)\n        self.ffn = tf.keras.Sequential([\n            tf.keras.layers.Dense(dff, activation='relu'),  # (batch_size, seq_len, dff) - 차원 확장\n            tf.keras.layers.Dense(d_model)  # (batch_size, seq_len, d_model) - 원래 차원으로 복원\n        ])\n    \n        # 첫 번째 레이어 후의 레이어 정규화 및 드롭아웃\n        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n        self.dropout1 = tf.keras.layers.Dropout(rate)\n    \n        # 두 번째 레이어 후의 레이어 정규화 및 드롭아웃\n        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n        self.dropout2 = tf.keras.layers.Dropout(rate)\n\n    def call(self, x, training=False, mask=None):\n        \"\"\"\n        EncoderLayer의 forward pass를 정의합니다.\n    \n        Args:\n            x: 입력 텐서 (batch_size, input_seq_len, d_model).\n            training: 학습 중인지 여부를 나타내는 불리언 플래그.\n            mask: 어텐션 마스크 텐서 (패딩 마스크).\n    \n        Returns:\n            EncoderLayer의 최종 출력 텐서 (batch_size, input_seq_len, d_model).\n        \"\"\"\n\n        # Self-Attention\n        # 표준 Post-LN 방식: Add & Norm -> Dropout\n        attn_output = self.mha(query=x, value=x, key=x, attention_mask=mask)\n        out1 = self.layernorm1(x + attn_output)\n        out1 = self.dropout1(out1, training=training)\n    \n        # Feed Forward\n        ffn_output = self.ffn(out1)\n        out2 = self.layernorm2(out1 + ffn_output)\n        out2 = self.dropout2(out2, training=training)\n\n        return out2","metadata":{"id":"69voCFtRF66Y","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:47.634881Z","iopub.execute_input":"2025-10-14T14:42:47.635112Z","iopub.status.idle":"2025-10-14T14:42:47.653794Z","shell.execute_reply.started":"2025-10-14T14:42:47.635090Z","shell.execute_reply":"2025-10-14T14:42:47.653024Z"}},"outputs":[],"execution_count":18},{"cell_type":"markdown","source":"트랜스포머의 인코딩 레이어 내 dropout과 normliazation 진행 순서\n- `Pre-Layer Normalization (Pre-LN)` 방식과 `Post-Layer Normalization (Post-LN)` 방식이 있다고 합니다.\n  - Post-LN (표준): Add -> Norm -> Dropout 순서\n  - Pre-LN: Norm -> SubLayer -> Dropout -> Add 순서\n\n- 이 소스에서는 LMS 학습 시 진행한대로 Post-LN방식으로 학습하였습니다.\n- 추후 여유가 된다면 진행 순서를 변경하여 학습도 진행해보겠습니다.","metadata":{"id":"6tkHK2dGSDIY"}},{"cell_type":"code","source":"# Keras 내장 레이어를 사용한 인코더\nclass Encoder(tf.keras.layers.Layer):\n    def __init__(self, num_layers, d_model, num_heads, dff, input_vocab_size,\n                 maximum_position_encoding, rate=0.1):\n        \"\"\"\n        트랜스포머 인코더를 정의합니다. Keras 내장 레이어를 활용합니다.\n\n        Args:\n            num_layers: 인코더 레이어의 개수.\n            d_model: 모델의 임베딩 차원.\n            num_heads: 멀티 헤드 어텐션의 헤드 개수.\n            dff: 피드포워드 네트워크의 내부 차원.\n            input_vocab_size: 입력 단어 사전의 크기.\n            maximum_position_encoding: 최대 위치 인코딩 길이.\n            rate: 드롭아웃 비율.\n        \"\"\"\n        super(Encoder, self).__init__()\n        self.d_model = d_model\n        self.num_layers = num_layers\n\n        self.embedding = tf.keras.layers.Embedding(input_vocab_size, d_model)\n        self.pos_encoding = PositionalEncoding(maximum_position_encoding, d_model)\n        self.enc_layers = [EncoderLayer(d_model, num_heads, dff, rate)\n                           for _ in range(num_layers)]\n        self.dropout = tf.keras.layers.Dropout(rate)\n\n        \n    def call(self, x, training=False, mask=None):\n\n        \"\"\"\n        인코더의 forward pass를 정의합니다.\n\n        Args:\n            x: 인코더 입력 텐서 (batch_size, input_seq_len).\n            training: 학습 중인지 여부를 나타내는 불리언 플래그.\n            mask: 패딩 마스크 텐서.\n\n        Returns:\n            인코더의 최종 출력 텐서 (batch_size, input_seq_len, d_model).\n        \"\"\"\n        seq_len = tf.shape(x)[1]\n\n        # 1. 입력 토큰 임베딩\n        x = self.embedding(x)\n        x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32)) # 임베딩 값에 스케일링 적용\n\n        # 2. 포지셔널 인코딩\n        x = self.pos_encoding(x)\n\n        # 3. 드롭아웃\n        x = self.dropout(x, training=training)\n\n        # 4. 인코더 레이어 통과\n        for enc_layer in self.enc_layers:\n            x = enc_layer(x, training=training, mask=mask)\n            \n        return x","metadata":{"id":"vSBkVym4HRKM","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:47.654516Z","iopub.execute_input":"2025-10-14T14:42:47.654791Z","iopub.status.idle":"2025-10-14T14:42:47.669666Z","shell.execute_reply.started":"2025-10-14T14:42:47.654771Z","shell.execute_reply":"2025-10-14T14:42:47.668867Z"}},"outputs":[],"execution_count":19},{"cell_type":"markdown","source":"#### Decoder","metadata":{"id":"vwuRvD58Ttd3"}},{"cell_type":"code","source":"# Keras 내장 레이어를 사용한 디코더 레이어\nclass DecoderLayer(tf.keras.layers.Layer):\n    def __init__(self, d_model, num_heads, dff, rate=0.1):\n        \"\"\"\n        트랜스포머 디코더의 단일 레이어를 정의합니다. Keras 내장 레이어를 활용합니다.\n\n        Args:\n            d_model: 모델의 임베딩 차원.\n            num_heads: 멀티 헤드 어텐션의 헤드 개수.\n            dff: 피드포워드 네트워크의 내부 차원.\n            rate: 드롭아웃 비율.\n        \"\"\"\n        super(DecoderLayer, self).__init__()\n\n        # 첫 번째 레이어: 마스크된 멀티 헤드 셀프 어텐션\n        self.mha1 = tf.keras.layers.MultiHeadAttention(num_heads=num_heads, key_dim=d_model//num_heads)\n        \n        # 두 번째 레이어: 멀티 헤드 크로스 어텐션 (인코더-디코더 어텐션)\n        self.mha2 = tf.keras.layers.MultiHeadAttention(num_heads=num_heads, key_dim=d_model//num_heads)\n\n        # 세 번째 레이어: 피드포워드 (2개의 Dense 레이어로 구성)\n        self.ffn = tf.keras.Sequential([\n            tf.keras.layers.Dense(dff, activation='relu'),\n            tf.keras.layers.Dense(d_model)\n        ])\n\n        # 각 레이어 후의 레이어 정규화 및 드롭아웃\n        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n        self.dropout1 = tf.keras.layers.Dropout(rate)\n        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n        self.dropout2 = tf.keras.layers.Dropout(rate)\n        self.layernorm3 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n        self.dropout3 = tf.keras.layers.Dropout(rate)\n\n    \n    def call(self, x, enc_output, training=False, look_ahead_mask=None, padding_mask=None):\n\n        \"\"\"\n        DecoderLayer의 forward pass를 정의합니다.\n\n        Args:\n            x: 디코더 입력 텐서 (batch_size, target_seq_len, d_model). (shifted target sequence)\n            enc_output: 인코더의 최종 출력 텐서 (batch_size, input_seq_len, d_model).\n            training: 학습 중인지 여부를 나타내는 불리언 플래그.\n            look_ahead_mask: 디코더 셀프 어텐션을 위한 룩어헤드 마스크 (미래 토큰 마스킹).\n            padding_mask: 디코더 크로스 어텐션을 위한 패딩 마스크 (인코더 출력 패딩 마스킹).\n\n        Returns:\n            DecoderLayer의 최종 출력 텐서 (batch_size, target_seq_len, d_model).\n        \"\"\"\n        # enc_output.shape == (batch_size, input_seq_len, d_model)\n\n        # 1. 마스크된 셀프 어텐션\n        attn1 = self.mha1(query=x, value=x, key=x, attention_mask=look_ahead_mask)\n        out1 = self.layernorm1(x + attn1)\n        out1 = self.dropout1(out1, training=training)\n\n\n        # 2. 인코더-디코더 어텐션\n        attn2 = self.mha2(query=out1, value=enc_output, key=enc_output, attention_mask=padding_mask)\n        out2 = self.layernorm2(out1 + attn2)\n        out2 = self.dropout2(out2, training=training)\n\n        # 3. 피드포워드\n        ffn_output = self.ffn(out2)\n        out3 = self.layernorm3(out2 + ffn_output)\n        out3 = self.dropout3(out3, training=training)\n\n        return out3","metadata":{"id":"tetm6tfSF9P1","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:47.670434Z","iopub.execute_input":"2025-10-14T14:42:47.670784Z","iopub.status.idle":"2025-10-14T14:42:47.685623Z","shell.execute_reply.started":"2025-10-14T14:42:47.670759Z","shell.execute_reply":"2025-10-14T14:42:47.684871Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"# Keras 내장 레이어를 사용한 디코더\nclass Decoder(tf.keras.layers.Layer):\n    def __init__(self, num_layers, d_model, num_heads, dff, target_vocab_size,\n                 maximum_position_encoding, rate=0.1):\n        \"\"\"\n        트랜스포머 디코더를 정의합니다. Keras 내장 레이어를 활용합니다.\n\n        Args:\n            num_layers: 디코더 레이어의 개수.\n            d_model: 모델의 임베딩 차원.\n            num_heads: 멀티 헤드 어텐션의 헤드 개수.\n            dff: 피드포워드 네트워크의 내부 차원.\n            target_vocab_size: 목표 단어 사전의 크기.\n            maximum_position_encoding: 최대 위치 인코딩 길이.\n            rate: 드롭아웃 비율.\n        \"\"\"\n        super(Decoder, self).__init__()\n\n        self.d_model = d_model\n        self.num_layers = num_layers\n\n        self.embedding = tf.keras.layers.Embedding(target_vocab_size, d_model)\n        self.pos_encoding = PositionalEncoding(maximum_position_encoding, d_model)\n        self.dec_layers = [DecoderLayer(d_model, num_heads, dff, rate)\n                           for _ in range(num_layers)]\n        self.dropout = tf.keras.layers.Dropout(rate)\n\n        \n    def call(self, x, enc_output, training=False, look_ahead_mask=None, padding_mask=None):\n        \"\"\"\n        디코더의 forward pass를 정의합니다.\n\n        Args:\n            x: 디코더 입력 텐서 (batch_size, target_seq_len). (shifted target sequence)\n            enc_output: 인코더의 최종 출력 텐서 (batch_size, input_seq_len, d_model).\n            training: 학습 중인지 여부를 나타내는 불리언 플래그.\n            look_ahead_mask: 디코더 셀프 어텐션을 위한 룩어헤드 마스크 (미래 토큰 마스킹).\n            padding_mask: 디코더 크로스 어텐션을 위한 패딩 마스크 (인코더 출력 패딩 마스킹).\n\n        Returns:\n            디코더의 최종 출력 텐서 (batch_size, target_seq_len, d_model).\n            (어텐션 가중치 반환은 선택 사항이며, DecoderLayer 클래스에서 설정해야 함)\n        \"\"\"\n        seq_len = tf.shape(x)[1]\n        \n        # 1. 목표 토큰 임베딩 (batch_size, seq_len, d_model)\n        x = self.embedding(x)\n        x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32)) # 임베딩 값에 스케일링 적용\n        x = self.pos_encoding(x)\n\n        # 2. 드롭아웃\n        x = self.dropout(x, training=training)\n\n        # 3. 디코더 레이어\n        for dec_layer in self.dec_layers:\n            x = dec_layer(x, enc_output, training=training,\n                          look_ahead_mask=look_ahead_mask, padding_mask=padding_mask)\n\n        return x","metadata":{"id":"VvJmECBPaLGB","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:47.686320Z","iopub.execute_input":"2025-10-14T14:42:47.686533Z","iopub.status.idle":"2025-10-14T14:42:47.697344Z","shell.execute_reply.started":"2025-10-14T14:42:47.686508Z","shell.execute_reply":"2025-10-14T14:42:47.696561Z"}},"outputs":[],"execution_count":21},{"cell_type":"markdown","source":"#### Transformer","metadata":{"id":"Dq-ZkM1xaCaH"}},{"cell_type":"code","source":"# Keras 내장 레이어를 사용한 트랜스포머 모델\nclass Transformer(tf.keras.Model):\n    def __init__(self, num_layers, d_model, num_heads, dff, input_vocab_size,\n                 target_vocab_size, pe_input, pe_target, rate=0.1):\n        \"\"\"\n        트랜스포머 모델을 정의합니다. 인코더, 디코더, 최종 선형 레이어로 구성됩니다.\n\n        Args:\n            num_layers: 인코더 및 디코더 레이어의 개수.\n            d_model: 모델의 임베딩 차원.\n            num_heads: 멀티 헤드 어텐션의 헤드 개수.\n            dff: 피드포워드 네트워크의 내부 차원.\n            input_vocab_size: 입력 단어 사전의 크기.\n            target_vocab_size: 목표 단어 사전의 크기.\n            pe_input: 인코더의 최대 위치 인코딩 길이.\n            pe_target: 디코더의 최대 위치 인코딩 길이.\n            rate: 드롭아웃 비율.\n        \"\"\"\n        super(Transformer, self).__init__()\n        self.encoder = Encoder(num_layers, d_model, num_heads, dff, input_vocab_size, pe_input, rate)\n        self.decoder = Decoder(num_layers, d_model, num_heads, dff, target_vocab_size, pe_target, rate)\n        self.final_layer = tf.keras.layers.Dense(target_vocab_size)\n\n        \n    def call(self, inputs, training=False):\n        \"\"\"\n        트랜스포머 모델의 forward pass를 정의합니다.\n\n        Args:\n            inputs: 입력 텐서 딕셔너리 {'inputs': 인코더 입력, 'dec_inputs': 디코더 입력}.\n            training: 학습 중인지 여부를 나타내는 불리언 플래그.\n\n        Returns:\n            최종 출력 텐서 (batch_size, tar_seq_len, target_vocab_size).\n            (어텐션 가중치 반환은 선택 사항이며, 필요 시 Decoder 클래스에서 설정해야 함)\n        \"\"\"\n\n        # 마스크 생성 (패딩 마스크, 룩어헤드 마스크)\n        enc_padding_mask, look_ahead_mask, dec_padding_mask = self.create_masks(inputs)\n\n        # 인코더 호출: 입력 시퀀스와 패딩 마스크 전달\n        enc_output = self.encoder(inputs['inputs'], training=training, mask=enc_padding_mask)\n        \n        # 디코더 호출: 디코더 입력, 인코더 출력, 룩어헤드 마스크, 디코더 패딩 마스크 전달\n        dec_output = self.decoder(inputs['dec_inputs'], enc_output, training=training,\n                                  look_ahead_mask=look_ahead_mask, padding_mask=dec_padding_mask)\n\n        # 최종 선형 레이어 통과: 디코더 출력을 단어 사전 차원으로 매핑\n        final_output = self.final_layer(dec_output)\n\n        return final_output\n\n    \n    def create_masks(self, inputs):\n        \"\"\"\n        인코더 및 디코더 어텐션을 위한 마스크를 생성합니다.\n\n        Args:\n            inputs: 입력 텐서 딕셔너리 {'inputs': 인코더 입력, 'dec_inputs': 디코더 입력}.\n\n        Returns:\n            enc_padding_mask: 인코더 self-attention을 위한 패딩 마스크.\n            combined_mask: 디코더 self-attention을 위한 룩어헤드 및 패딩 마스크.\n            dec_padding_mask: 디코더 cross-attention을 위한 패딩 마스크.\n        \"\"\"\n        # 입력 딕셔너리에서 텐서 가져오기\n        inp = inputs['inputs']\n        tar = inputs['dec_inputs']\n\n        enc_padding_mask = create_padding_mask(inp) # 인코더 self-attention용 패딩 마스크\n\n        look_ahead_mask = create_look_ahead_mask(tar)\n        dec_target_padding_mask = create_padding_mask(tar)\n        combined_mask = tf.maximum(dec_target_padding_mask, look_ahead_mask) # 디코더 self-attention용 룩어헤드 + 디코더 입력 패딩 마스크\n        \n        dec_padding_mask = create_padding_mask(inp) # 디코더 cross-attention용 인코더 출력 패딩 마스크\n\n        return enc_padding_mask, combined_mask, dec_padding_mask","metadata":{"id":"69263d22","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:47.698124Z","iopub.execute_input":"2025-10-14T14:42:47.698375Z","iopub.status.idle":"2025-10-14T14:42:47.715756Z","shell.execute_reply.started":"2025-10-14T14:42:47.698360Z","shell.execute_reply":"2025-10-14T14:42:47.715140Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"# 하이퍼파라미터 정의\nNUM_LAYERS = 8 # 6 -> 8\nD_MODEL = 256 # 256 -> 512\nNUM_HEADS = 8\nDFF = 512\nDROPOUT_RATE = 0.1\n\n# Transformer 모델 인스턴스 생성\npe_input_length = max_sequence_length\npe_target_length = max_sequence_length\n\nmodel = Transformer(\n    NUM_LAYERS, D_MODEL, NUM_HEADS, DFF,\n    VOCAB_SIZE, VOCAB_SIZE,\n    pe_input=pe_input_length,\n    pe_target=pe_target_length,\n    rate=DROPOUT_RATE\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:47.716455Z","iopub.execute_input":"2025-10-14T14:42:47.716789Z","iopub.status.idle":"2025-10-14T14:42:48.352307Z","shell.execute_reply.started":"2025-10-14T14:42:47.716771Z","shell.execute_reply":"2025-10-14T14:42:48.351713Z"}},"outputs":[],"execution_count":23},{"cell_type":"markdown","source":"### 손실 함수 및 옵티마이저 설정\n\n- 모델 학습에 사용할 손실 함수와 옵티마이저를 설정합니다.","metadata":{"id":"0b860729"}},{"cell_type":"code","source":"# 패딩 토큰을 무시하는 손실 함수 정의\n\ndef loss_function(real, pred):\n    loss_object = tf.keras.losses.SparseCategoricalCrossentropy(\n        from_logits=True, reduction='none')\n    \n    mask = tf.math.logical_not(tf.math.equal(real, 0))\n    loss_ = loss_object(real, pred)\n\n    mask = tf.cast(mask, dtype=loss_.dtype)\n    loss_ *= mask\n\n    return tf.reduce_sum(loss_)/tf.reduce_sum(mask)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:48.353027Z","iopub.execute_input":"2025-10-14T14:42:48.353248Z","iopub.status.idle":"2025-10-14T14:42:48.358197Z","shell.execute_reply.started":"2025-10-14T14:42:48.353230Z","shell.execute_reply":"2025-10-14T14:42:48.357281Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"class CustomSchedule(tf.keras.optimizers.schedules.LearningRateSchedule):\n    def __init__(self, d_model, warmup_steps=4000):\n        super(CustomSchedule, self).__init__()\n        self.d_model = tf.cast(d_model, tf.float32)\n        self.warmup_steps = warmup_steps\n\n    def __call__(self, step):\n        arg1 = tf.math.rsqrt(tf.cast(step, tf.float32))\n        arg2 = step * (self.warmup_steps ** -1.5)\n        return tf.math.rsqrt(self.d_model) * tf.math.minimum(arg1, arg2)\n\n    def get_config(self):\n        return {\n            \"d_model\": float(self.d_model.numpy()),  # d_model은 float32로 저장\n            \"warmup_steps\": self.warmup_steps\n        }","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:48.358934Z","iopub.execute_input":"2025-10-14T14:42:48.359176Z","iopub.status.idle":"2025-10-14T14:42:48.372252Z","shell.execute_reply.started":"2025-10-14T14:42:48.359160Z","shell.execute_reply":"2025-10-14T14:42:48.371600Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"sample_learning_rate = CustomSchedule(d_model=128)\n\nplt.plot(sample_learning_rate(tf.range(200000, dtype=tf.float32)))\nplt.ylabel(\"Learning Rate\")\nplt.xlabel(\"Train Step\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:48.375535Z","iopub.execute_input":"2025-10-14T14:42:48.375768Z","iopub.status.idle":"2025-10-14T14:42:49.000098Z","shell.execute_reply.started":"2025-10-14T14:42:48.375752Z","shell.execute_reply":"2025-10-14T14:42:48.999414Z"}},"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 0, 'Train Step')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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lIjx48eLgIAAERQUJCZPnizKysqsyuzbt08MGzZMKJVK0b59e7Fo0aKr6vL111+Lbt26CYVCIXr37i1++OEHq/XNqYst55efn3/Nf5OWucdycnJEfHy8UKvVQqVSiZ49e4r/+7//swokzjy/651jZWWluOeee0S7du2Ej4+PiI6OFk8++eRVAdxdv0OLDz74QPj6+gqdTnfV9q7+HV6vXRDCtf52Nqcu1yO7dOJEREREdAM4poqIiIjIDhiqiIiIiOyAoYqIiIjIDhiqiIiIiOyAoYqIiIjIDhiqiIiIiOyAoYqIiIjIDhiqiIiIiOyAoYqICECnTp3w1ltvObsaROTGGKqIyK3IZLImX//4xz9atN9du3Zh6tSpN1S3/Px8/OUvf0FkZCRUKhU6dOiAsWPHIi8vDwBw8uRJyGQy6YHURORZvJ1dASIiW5w/f176fe3atUhNTcWRI0ekZQEBAdLvQgiYTCZ4e1//T127du1uqF61tbW4++670b17d3z77beIiIjAmTNnsGnTJuh0uhvaNxG5B/ZUEZFb0Wg00kutVkMmk0nv8/LyEBgYiE2bNmHgwIFQKpXYtm0bjh8/jrFjxyI8PBwBAQG49dZb8dNPP1nt98rLfzKZDB999BEefPBB+Pn5ITY2Ft99990163Xw4EEcP34c7733HoYMGYLo6GjcdtttWLhwIYYMGQIAiImJAQAMGDAAMpkMd9xxh7T9Rx99hJ49e0KlUqFHjx547733pHWWHq41a9Zg6NChUKlU6NOnD37++Wc7fKJEZC8MVUTkcV5++WUsWrQIhw8fRt++fVFeXo7Ro0cjMzMTubm5GDVqFO6//34UFBQ0uZ9XXnkFjzzyCPbv34/Ro0djwoQJKC0tbbRsu3btIJfL8c0338BkMjVaZufOnQCAn376CefPn8e3334LAPjiiy+QmpqKV199FYcPH8b//d//Yd68eVi9erXV9i+++CJmzpyJ3NxcJCQk4P7770dJSYmtHw8ROYogInJTn376qVCr1dL7LVu2CABi/fr11922d+/e4p133pHeR0dHizfffFN6D0DMnTtXel9eXi4AiE2bNl1zn++++67w8/MTgYGB4s477xQLFiwQx48fl9bn5+cLACI3N9dquy5duogvv/zSatn//u//ioSEBKvtFi1aJK2vra0VHTp0EK+99tp1z5WIWgd7qojI4wwaNMjqfXl5OV544QX07NkTwcHBCAgIwOHDh6/bU9W3b1/pd39/fwQFBaGoqOia5adNmwatVosvvvgCCQkJWLduHXr37o2MjIxrblNRUYHjx49jypQpCAgIkF4LFy7E8ePHrcomJCRIv3t7e2PQoEE4fPhwk+dARK2HA9WJyOP4+/tbvX/hhReQkZGBpUuXomvXrvD19cWf/vQnGI3GJvfj4+Nj9V4mk8FsNje5TWBgIO6//37cf//9WLhwIZKSkrBw4ULcfffdjZYvLy8HAHz44YeIj4+3Wufl5dXksYjItbCniog83vbt2/H444/jwQcfRFxcHDQaDU6ePOnw48pkMvTo0QMVFRUAAIVCAQBWY67Cw8MRGRmJEydOoGvXrlYvy8B2i99++036va6uDjk5OejZs6fDz4OImoc9VUTk8WJjY/Htt9/i/vvvh0wmw7x5867b42SrvXv3Yv78+XjsscfQq1cvKBQK/Pzzz/jkk08wa9YsAEBYWBh8fX2Rnp6ODh06QKVSQa1W45VXXsFzzz0HtVqNUaNGoaamBrt378bFixeRkpIiHWP58uWIjY1Fz5498eabb+LixYt44okn7HoeRNRyDFVE5PHeeOMNPPHEExg6dChCQ0Mxa9YsGAwGux6jQ4cO6NSpE1555RVpCgTL++effx5A/TioZcuWYcGCBUhNTcXw4cOxdetW/PWvf4Wfnx+WLFmCF198Ef7+/oiLi8OMGTOsjrFo0SIsWrQIe/fuRdeuXfHdd98hNDTUrudBRC0nE0IIZ1eCiIiu7eTJk4iJiUFubi769+/v7OoQ0TVwTBURERGRHTBUEREREdkBL/8RERER2QF7qoiIiIjsgKGKiIiIyA4YqoiIiIjsgKGKiIiIyA4YqoiIiIjsgKGKiIiIyA4YqoiIiIjsgKGKiIiIyA7+P0fIxnC3gNUzAAAAAElFTkSuQmCC\n"},"metadata":{}}],"execution_count":26},{"cell_type":"code","source":"# 옵티마이저 설정\nlearning_rate = CustomSchedule(D_MODEL) # D_MODEL은 모델 차원 수에 따라 설정해야 합니다.\n\noptimizer = tf.keras.optimizers.Adam(\n    learning_rate=CustomSchedule(D_MODEL),\n    beta_1=0.9, beta_2=0.98, epsilon=1e-9\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:49.000842Z","iopub.execute_input":"2025-10-14T14:42:49.001120Z","iopub.status.idle":"2025-10-14T14:42:49.010216Z","shell.execute_reply.started":"2025-10-14T14:42:49.001101Z","shell.execute_reply":"2025-10-14T14:42:49.009452Z"}},"outputs":[],"execution_count":27},{"cell_type":"markdown","source":"### 모델 컴파일 및 학습\n\n- 정의된 모델을 컴파일하고 데이터를 사용하여 학습시킵니다.","metadata":{"id":"0ba88c51"}},{"cell_type":"code","source":"# 학습/검증 데이터셋 분리\nval_size = int(0.1 * len(dataset))  # 10%를 검증용으로 사용\ntrain_dataset = dataset.skip(val_size)\nval_dataset = dataset.take(val_size)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:49.011007Z","iopub.execute_input":"2025-10-14T14:42:49.011184Z","iopub.status.idle":"2025-10-14T14:42:49.025046Z","shell.execute_reply.started":"2025-10-14T14:42:49.011160Z","shell.execute_reply":"2025-10-14T14:42:49.024204Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"# 모델 컴파일\nmodel.compile(optimizer=optimizer, \n              loss=loss_function, \n              metrics=[tf.keras.metrics.SparseCategoricalAccuracy(name='accuracy')])\n\n# 모델 학습\ncallbacks = [\n    tf.keras.callbacks.ModelCheckpoint('transformer_ckpt.h5', save_best_only=True),\n    tf.keras.callbacks.EarlyStopping(patience=5, restore_best_weights=True) # 안정적인 학습을 위해 patience 수정 (3->5)\n]\n\nhistory = model.fit(\n    train_dataset,\n    epochs=100,\n    validation_data=val_dataset,  \n    callbacks=callbacks\n)","metadata":{"id":"cffba054","trusted":true,"execution":{"iopub.status.busy":"2025-10-14T14:42:49.025929Z","iopub.execute_input":"2025-10-14T14:42:49.026173Z","iopub.status.idle":"2025-10-14T15:13:51.208052Z","shell.execute_reply.started":"2025-10-14T14:42:49.026150Z","shell.execute_reply":"2025-10-14T15:13:51.207353Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/100\n","output_type":"stream"},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1760453057.920930    9555 service.cc:148] XLA service 0x781660003cd0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\nI0000 00:00:1760453057.920977    9555 service.cc:156]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\nI0000 00:00:1760453057.920983    9555 service.cc:156]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\nW0000 00:00:1760453062.449121    9555 assert_op.cc:38] Ignoring Assert operator compile_loss/loss_function/sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/assert_equal_1/Assert/Assert\nI0000 00:00:1760453065.601081    9555 cuda_dnn.cc:529] Loaded cuDNN version 90300\nI0000 00:00:1760453103.673447    9555 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m166/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 123ms/step - accuracy: 0.0136 - loss: 8.7649","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1760453127.761496    9553 assert_op.cc:38] Ignoring Assert operator compile_loss/loss_function/sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/assert_equal_1/Assert/Assert\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 382ms/step - accuracy: 0.0137 - loss: 8.7630","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1760453172.567964    9555 assert_op.cc:38] Ignoring Assert operator compile_loss/loss_function/sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/assert_equal_1/Assert/Assert\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m208s\u001b[0m 441ms/step - accuracy: 0.0138 - loss: 8.7610 - val_accuracy: 0.0333 - val_loss: 7.7078\nEpoch 2/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 136ms/step - accuracy: 0.0495 - loss: 7.3870 - val_accuracy: 0.0644 - val_loss: 6.2645\nEpoch 3/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 134ms/step - accuracy: 0.0654 - loss: 6.1034 - val_accuracy: 0.0652 - val_loss: 5.5612\nEpoch 4/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.0668 - loss: 5.5285 - val_accuracy: 0.0709 - val_loss: 5.1904\nEpoch 5/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.0708 - loss: 5.1094 - val_accuracy: 0.0713 - val_loss: 4.7539\nEpoch 6/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 135ms/step - accuracy: 0.0722 - loss: 4.8010 - val_accuracy: 0.0719 - val_loss: 4.4682\nEpoch 7/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.0749 - loss: 4.4825 - val_accuracy: 0.0802 - val_loss: 4.2432\nEpoch 8/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.0780 - loss: 4.2664 - val_accuracy: 0.0756 - val_loss: 4.1077\nEpoch 9/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.0806 - loss: 4.1189 - val_accuracy: 0.0857 - val_loss: 3.7984\nEpoch 10/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.0850 - loss: 3.9005 - val_accuracy: 0.0885 - val_loss: 3.6060\nEpoch 11/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.0908 - loss: 3.6762 - val_accuracy: 0.1020 - val_loss: 3.3020\nEpoch 12/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.0967 - loss: 3.3983 - val_accuracy: 0.1060 - val_loss: 3.0085\nEpoch 13/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.1031 - loss: 3.1740 - val_accuracy: 0.1123 - val_loss: 2.8745\nEpoch 14/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.1059 - loss: 2.9878 - val_accuracy: 0.1223 - val_loss: 2.5751\nEpoch 15/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1092 - loss: 2.8399 - val_accuracy: 0.1228 - val_loss: 2.4569\nEpoch 16/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1124 - loss: 2.6979 - val_accuracy: 0.1284 - val_loss: 2.2222\nEpoch 17/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.1158 - loss: 2.5468 - val_accuracy: 0.1294 - val_loss: 2.1535\nEpoch 18/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1190 - loss: 2.3957 - val_accuracy: 0.1390 - val_loss: 1.9707\nEpoch 19/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1210 - loss: 2.2808 - val_accuracy: 0.1393 - val_loss: 1.8541\nEpoch 20/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.1222 - loss: 2.2534 - val_accuracy: 0.1389 - val_loss: 1.7738\nEpoch 21/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1254 - loss: 2.1316 - val_accuracy: 0.1455 - val_loss: 1.6888\nEpoch 22/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1254 - loss: 2.1442 - val_accuracy: 0.1460 - val_loss: 1.6141\nEpoch 23/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1311 - loss: 1.9798 - val_accuracy: 0.1480 - val_loss: 1.5108\nEpoch 24/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1325 - loss: 1.9065 - val_accuracy: 0.1538 - val_loss: 1.4245\nEpoch 25/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1355 - loss: 1.8122 - val_accuracy: 0.1590 - val_loss: 1.3524\nEpoch 26/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1369 - loss: 1.7652 - val_accuracy: 0.1621 - val_loss: 1.2112\nEpoch 27/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1425 - loss: 1.6431 - val_accuracy: 0.1734 - val_loss: 1.0750\nEpoch 28/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 125ms/step - accuracy: 0.1457 - loss: 1.5709 - val_accuracy: 0.1677 - val_loss: 1.1403\nEpoch 29/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.1499 - loss: 1.4542 - val_accuracy: 0.1740 - val_loss: 1.0027\nEpoch 30/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1529 - loss: 1.3861 - val_accuracy: 0.1805 - val_loss: 0.8433\nEpoch 31/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1547 - loss: 1.3140 - val_accuracy: 0.1849 - val_loss: 0.8087\nEpoch 32/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1592 - loss: 1.2531 - val_accuracy: 0.1892 - val_loss: 0.7216\nEpoch 33/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1583 - loss: 1.2593 - val_accuracy: 0.1865 - val_loss: 0.6914\nEpoch 34/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1625 - loss: 1.1743 - val_accuracy: 0.1870 - val_loss: 0.6298\nEpoch 35/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1658 - loss: 1.1709 - val_accuracy: 0.1939 - val_loss: 0.6228\nEpoch 36/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1706 - loss: 1.0207 - val_accuracy: 0.1958 - val_loss: 0.5893\nEpoch 37/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1698 - loss: 1.0505 - val_accuracy: 0.1939 - val_loss: 0.5375\nEpoch 38/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1736 - loss: 0.9495 - val_accuracy: 0.1980 - val_loss: 0.5170\nEpoch 39/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1761 - loss: 0.9403 - val_accuracy: 0.2020 - val_loss: 0.4440\nEpoch 40/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1762 - loss: 0.8904 - val_accuracy: 0.2044 - val_loss: 0.4147\nEpoch 41/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 124ms/step - accuracy: 0.1781 - loss: 0.8707 - val_accuracy: 0.2031 - val_loss: 0.4343\nEpoch 42/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 125ms/step - accuracy: 0.1779 - loss: 0.8737 - val_accuracy: 0.2038 - val_loss: 0.4701\nEpoch 43/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.1804 - loss: 0.8404 - val_accuracy: 0.2013 - val_loss: 0.4115\nEpoch 44/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1819 - loss: 0.8189 - val_accuracy: 0.2045 - val_loss: 0.3981\nEpoch 45/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1813 - loss: 0.8122 - val_accuracy: 0.2034 - val_loss: 0.3784\nEpoch 46/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 124ms/step - accuracy: 0.1843 - loss: 0.7666 - val_accuracy: 0.2083 - val_loss: 0.3819\nEpoch 47/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1859 - loss: 0.7137 - val_accuracy: 0.2055 - val_loss: 0.3663\nEpoch 48/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.1823 - loss: 0.8363 - val_accuracy: 0.2068 - val_loss: 0.3338\nEpoch 49/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1872 - loss: 0.7047 - val_accuracy: 0.2124 - val_loss: 0.2952\nEpoch 50/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 124ms/step - accuracy: 0.1892 - loss: 0.6644 - val_accuracy: 0.2090 - val_loss: 0.3012\nEpoch 51/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.1874 - loss: 0.6962 - val_accuracy: 0.2087 - val_loss: 0.2937\nEpoch 52/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1897 - loss: 0.6489 - val_accuracy: 0.2149 - val_loss: 0.2598\nEpoch 53/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 124ms/step - accuracy: 0.1931 - loss: 0.6085 - val_accuracy: 0.2111 - val_loss: 0.2948\nEpoch 54/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.1921 - loss: 0.6002 - val_accuracy: 0.2128 - val_loss: 0.2469\nEpoch 55/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1936 - loss: 0.5716 - val_accuracy: 0.2131 - val_loss: 0.2332\nEpoch 56/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1940 - loss: 0.5748 - val_accuracy: 0.2151 - val_loss: 0.2227\nEpoch 57/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 125ms/step - accuracy: 0.1946 - loss: 0.5551 - val_accuracy: 0.2145 - val_loss: 0.2734\nEpoch 58/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1940 - loss: 0.5804 - val_accuracy: 0.2160 - val_loss: 0.1936\nEpoch 59/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 124ms/step - accuracy: 0.1968 - loss: 0.5439 - val_accuracy: 0.2146 - val_loss: 0.2269\nEpoch 60/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1965 - loss: 0.5071 - val_accuracy: 0.2179 - val_loss: 0.1910\nEpoch 61/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 124ms/step - accuracy: 0.1979 - loss: 0.5077 - val_accuracy: 0.2131 - val_loss: 0.1927\nEpoch 62/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1973 - loss: 0.5044 - val_accuracy: 0.2148 - val_loss: 0.1728\nEpoch 63/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 125ms/step - accuracy: 0.1990 - loss: 0.4793 - val_accuracy: 0.2179 - val_loss: 0.1837\nEpoch 64/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 124ms/step - accuracy: 0.1991 - loss: 0.4991 - val_accuracy: 0.2163 - val_loss: 0.2027\nEpoch 65/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.1991 - loss: 0.5160 - val_accuracy: 0.2170 - val_loss: 0.1350\nEpoch 66/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 124ms/step - accuracy: 0.2013 - loss: 0.4406 - val_accuracy: 0.2215 - val_loss: 0.1585\nEpoch 67/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 124ms/step - accuracy: 0.2025 - loss: 0.4499 - val_accuracy: 0.2196 - val_loss: 0.1530\nEpoch 68/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 124ms/step - accuracy: 0.2026 - loss: 0.4302 - val_accuracy: 0.2153 - val_loss: 0.1557\nEpoch 69/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 124ms/step - accuracy: 0.2036 - loss: 0.4266 - val_accuracy: 0.2191 - val_loss: 0.1610\nEpoch 70/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.2008 - loss: 0.4489 - val_accuracy: 0.2201 - val_loss: 0.1135\nEpoch 71/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 124ms/step - accuracy: 0.2051 - loss: 0.3885 - val_accuracy: 0.2202 - val_loss: 0.1393\nEpoch 72/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.2042 - loss: 0.3965 - val_accuracy: 0.2178 - val_loss: 0.1052\nEpoch 73/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 125ms/step - accuracy: 0.2027 - loss: 0.4210 - val_accuracy: 0.2249 - val_loss: 0.1205\nEpoch 74/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 125ms/step - accuracy: 0.2029 - loss: 0.4236 - val_accuracy: 0.2199 - val_loss: 0.1213\nEpoch 75/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 125ms/step - accuracy: 0.2053 - loss: 0.3763 - val_accuracy: 0.2217 - val_loss: 0.1071\nEpoch 76/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 125ms/step - accuracy: 0.2058 - loss: 0.3680 - val_accuracy: 0.2255 - val_loss: 0.1533\nEpoch 77/100\n\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 125ms/step - accuracy: 0.2049 - loss: 0.3943 - val_accuracy: 0.2159 - val_loss: 0.1373\n","output_type":"stream"}],"execution_count":29},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# 학습 로그(history)에서 loss와 accuracy 가져오기\ntrain_loss = history.history['loss']\ntrain_acc = history.history['accuracy']\n\nval_loss = history.history.get('val_loss')\nval_acc = history.history.get('val_accuracy')\n\nepochs_range = range(1, len(train_loss) + 1)\n\n# Loss 시각화\nplt.figure(figsize=(12,5))\nplt.subplot(1,2,1)\nplt.plot(epochs_range, train_loss, label='Train Loss')\nif val_loss:\n    plt.plot(epochs_range, val_loss, label='Val Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.title('Loss over Epochs')\nplt.legend()\n\n# Accuracy 시각화\nplt.subplot(1,2,2)\nplt.plot(epochs_range, train_acc, label='Train Accuracy')\nif val_acc:\n    plt.plot(epochs_range, val_acc, label='Val Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('Accuracy over Epochs')\nplt.legend()\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2025-10-14T15:13:51.208902Z","iopub.execute_input":"2025-10-14T15:13:51.209133Z","iopub.status.idle":"2025-10-14T15:13:51.553748Z","shell.execute_reply.started":"2025-10-14T15:13:51.209114Z","shell.execute_reply":"2025-10-14T15:13:51.553030Z"},"trusted":true},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x500 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":30},{"cell_type":"markdown","source":"학습 이력\n\n1. epoch 20 설정 >> accuracy: 0.1352 - loss: 1.9847 - val_accuracy: 0.1540 - val_loss: 1.5961\n2. epoch 40 설정 >> accuracy: 0.2086 - loss: 0.3111 - val_accuracy: 0.2247 - val_loss: 0.0826\n    - epoch 37에서 학습 멈춤. 쳇봇 테스트 결과 엉망.\n3. epoch 100 설정 >> accuracy: 0.2222 - loss: 0.0688 - val_accuracy: 0.2250 - val_loss: 0.0042\n    - epoch 98에서 학습 멈춤. 여전히 쳇봇 테스트 결과는 엉망입니다.\n    - 교사학습을 사용했지만 여전히 모델 성능에 유의미한 결과를 얻기는 무리인 것 같아보입니다.\n    - 이에, 우선 sentence 전처리 함수를 보강하였습니다.\n4. 전처리 함수 보강 후 epoch 100회 학습 >> accuracy: 0.2154 - loss: 0.2265 - val_accuracy: 0.2264 - val_loss: 0.0479\n    - epoch 59에서 학습  멈춤.\n    - 여전히 쳇봇 테스트 결과는 모델 성능과 별개로 엉망입니다. \n5. LAYERS 8, D_MODEL 512 설정 >> accuracy: 0.2243 - loss: 0.0613 - val_accuracy: 0.2255 - val_loss: 0.0096\n    - epoch 69에서 학습 멈춤\n6. LAYERS 8, D_MODEL 256 설정 >> accuracy: 0.2259 - loss: 0.0320 - val_accuracy: 0.2287 - val_loss: 0.0040\n7. LAYERS 6, D_MODEL 512 설정 >> accuracy: 0.2049 - loss: 0.3943 - val_accuracy: 0.2159 - val_loss: 0.1373","metadata":{}},{"cell_type":"markdown","source":"## Step 5. 모델 평가하기\n","metadata":{}},{"cell_type":"markdown","source":"### LMS 버전 테스트 코드","metadata":{}},{"cell_type":"code","source":"def decoder_inference(sentence):\n    sentence = preprocess_sentence(sentence)\n\n    # 입력 문장을 정수 인코딩 후 START/END 토큰 추가\n    sentence = tf.expand_dims(\n        tf.constant(START_TOKEN + tokenizer.encode(sentence) + END_TOKEN, dtype=tf.int32), axis=0\n    )\n\n    # 디코더 초기 입력\n    output_sequence = tf.expand_dims(tf.constant(START_TOKEN, dtype=tf.int32), 0)\n    MAX_LENGTH = 31\n    for i in range(MAX_LENGTH):\n        predictions = model(\n            inputs={'inputs': sentence, 'dec_inputs': output_sequence},\n            training=False\n        )\n        predictions = predictions[:, -1:, :]\n\n        predicted_id = tf.cast(tf.argmax(predictions, axis=-1), tf.int32)\n\n        if tf.equal(predicted_id, END_TOKEN[0]):\n            break\n\n        output_sequence = tf.concat([output_sequence, predicted_id], axis=-1)\n\n    return tf.squeeze(output_sequence, axis=0)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-14T15:13:51.554628Z","iopub.execute_input":"2025-10-14T15:13:51.554909Z","iopub.status.idle":"2025-10-14T15:13:51.560913Z","shell.execute_reply.started":"2025-10-14T15:13:51.554886Z","shell.execute_reply":"2025-10-14T15:13:51.560140Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"def sentence_generation(sentence):\n  # 입력 문장에 대해서 디코더를 동작 시켜 예측된 정수 시퀀스를 리턴받습니다.\n  prediction = decoder_inference(sentence)\n\n  # 정수 시퀀스를 다시 텍스트 시퀀스로 변환합니다.\n  predicted_sentence = tokenizer.decode(\n      [i for i in prediction if i < tokenizer.vocab_size])\n\n  print('입력 : {}'.format(sentence))\n  print('출력 : {}'.format(predicted_sentence))\n\n  return predicted_sentence\nprint(\"슝=3\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-14T15:13:51.561741Z","iopub.execute_input":"2025-10-14T15:13:51.561981Z","iopub.status.idle":"2025-10-14T15:13:51.577315Z","shell.execute_reply.started":"2025-10-14T15:13:51.561965Z","shell.execute_reply":"2025-10-14T15:13:51.576521Z"}},"outputs":[{"name":"stdout","text":"슝=3\n","output_type":"stream"}],"execution_count":32},{"cell_type":"code","source":"sentence_generation('안녕')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-14T15:13:51.578251Z","iopub.execute_input":"2025-10-14T15:13:51.578487Z","iopub.status.idle":"2025-10-14T15:14:03.824296Z","shell.execute_reply.started":"2025-10-14T15:13:51.578471Z","shell.execute_reply":"2025-10-14T15:14:03.823496Z"}},"outputs":[{"name":"stdout","text":"입력 : 안녕\n출력 : 된 당신이 직접 친구가 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 \n","output_type":"stream"},{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"'된 당신이 직접 친구가 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 '"},"metadata":{}}],"execution_count":33},{"cell_type":"code","source":"sentence_generation('반가워')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-14T15:14:03.825509Z","iopub.execute_input":"2025-10-14T15:14:03.825830Z","iopub.status.idle":"2025-10-14T15:14:13.152612Z","shell.execute_reply.started":"2025-10-14T15:14:03.825804Z","shell.execute_reply":"2025-10-14T15:14:13.151992Z"}},"outputs":[{"name":"stdout","text":"입력 : 반가워\n출력 : 된 당신이 직접 친구가 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 \n","output_type":"stream"},{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"'된 당신이 직접 친구가 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 '"},"metadata":{}}],"execution_count":34},{"cell_type":"code","source":"sentence_generation('안녕?')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-14T15:14:13.153499Z","iopub.execute_input":"2025-10-14T15:14:13.153934Z","iopub.status.idle":"2025-10-14T15:14:22.521331Z","shell.execute_reply.started":"2025-10-14T15:14:13.153913Z","shell.execute_reply":"2025-10-14T15:14:22.520719Z"}},"outputs":[{"name":"stdout","text":"입력 : 안녕?\n출력 : 된 당신이 직접 친구가 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 \n","output_type":"stream"},{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"'된 당신이 직접 친구가 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 '"},"metadata":{}}],"execution_count":35},{"cell_type":"code","source":"sentence_generation('안녕 ㅠㅠ')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-14T15:14:22.522023Z","iopub.execute_input":"2025-10-14T15:14:22.522219Z","iopub.status.idle":"2025-10-14T15:14:31.957226Z","shell.execute_reply.started":"2025-10-14T15:14:22.522204Z","shell.execute_reply":"2025-10-14T15:14:31.956608Z"}},"outputs":[{"name":"stdout","text":"입력 : 안녕 ㅠㅠ\n출력 : 된 당신이 직접 친구가 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 \n","output_type":"stream"},{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"'된 당신이 직접 친구가 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 '"},"metadata":{}}],"execution_count":36},{"cell_type":"code","source":"sentence_generation('나랑 친구해줄래?')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-14T15:14:31.957911Z","iopub.execute_input":"2025-10-14T15:14:31.958179Z","iopub.status.idle":"2025-10-14T15:14:41.330263Z","shell.execute_reply.started":"2025-10-14T15:14:31.958152Z","shell.execute_reply":"2025-10-14T15:14:41.329591Z"}},"outputs":[{"name":"stdout","text":"입력 : 나랑 친구해줄래?\n출력 : 된 당신이 직접 친구가 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 \n","output_type":"stream"},{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"'된 당신이 직접 친구가 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 '"},"metadata":{}}],"execution_count":37},{"cell_type":"markdown","source":"### top-k 샘플링 및 반복 방지용 temperature 적용","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nimport numpy as np\n\ndef sentence_generation_advanced(sentence, max_length=31, temperature=1.0, top_k=50, top_p=0.9, repetition_penalty=1.2):\n    \"\"\"\n    입력 문장 -> 모델이 생성한 문장 반환\n    Args:\n        sentence (str): 입력 문장\n        max_length (int): 생성 최대 길이\n        temperature (float): 확률 분포 샤프닝\n        top_k (int): 상위 k개 단어만 고려\n        top_p (float): 누적 확률 top-p만 고려 (nucleus sampling)\n        repetition_penalty (float): 반복 단어 패널티 (>1: 반복 억제)\n    \"\"\"\n    \n    # 1️⃣ 문장 전처리\n    sentence = preprocess_sentence(sentence)\n    \n    # 2️⃣ 인코더 입력\n    encoder_input = tf.expand_dims(START_TOKEN + tokenizer.encode(sentence) + END_TOKEN, axis=0)\n    \n    # 3️⃣ 디코더 입력 초기화\n    decoder_input = tf.constant([START_TOKEN[0]], shape=(1,1), dtype=tf.int32)\n    \n    # 4️⃣ 생성된 단어 기록\n    generated_ids = [START_TOKEN[0]]\n    \n    for _ in range(max_length):\n        # 모델 호출\n        predictions = model(inputs={'inputs': encoder_input, 'dec_inputs': decoder_input}, training=False)\n        logits = predictions[:, -1, :].numpy().flatten()\n        \n        # 4-1️⃣ 반복 단어 패널티 적용\n        for token_id in set(generated_ids):\n            logits[token_id] /= repetition_penalty\n        \n        # 4-2️⃣ temperature 적용\n        logits = logits / temperature\n        \n        # 4-3️⃣ top-k 필터링\n        if top_k > 0:\n            indices_to_remove = logits < np.sort(logits)[-top_k]\n            logits[indices_to_remove] = -np.inf\n        \n        # 4-4️⃣ top-p(nucleus) 필터링\n        if top_p < 1.0:\n            sorted_indices = np.argsort(logits)[::-1]\n            sorted_logits = logits[sorted_indices]\n            cumulative_probs = np.cumsum(tf.nn.softmax(sorted_logits).numpy())\n            cutoff = np.where(cumulative_probs > top_p)[0]\n            if len(cutoff) > 0:\n                sorted_logits[cutoff[0]+1:] = -np.inf\n            # 원래 logits 배열에 반영\n            logits[sorted_indices] = sorted_logits\n        \n        # 4-5️⃣ 다음 단어 샘플링\n        probs = tf.nn.softmax(logits).numpy()\n        next_token = np.random.choice(len(probs), p=probs)\n        \n        # 종료 토큰이면 종료\n        if next_token == END_TOKEN[0]:\n            break\n        \n        # 디코더 입력 업데이트\n        decoder_input = tf.concat([decoder_input, [[next_token]]], axis=-1)\n        generated_ids.append(next_token)\n    \n    # 5️⃣ START/END 토큰 제거 후 디코딩\n    predicted_sequence = [idx for idx in generated_ids if idx not in START_TOKEN + END_TOKEN]\n    predicted_sentence = tokenizer.decode(predicted_sequence)\n    \n    return predicted_sentence\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-14T15:14:41.331058Z","iopub.execute_input":"2025-10-14T15:14:41.331319Z","iopub.status.idle":"2025-10-14T15:14:41.339850Z","shell.execute_reply.started":"2025-10-14T15:14:41.331299Z","shell.execute_reply":"2025-10-14T15:14:41.339124Z"}},"outputs":[],"execution_count":38},{"cell_type":"code","source":"# 테스트 입력 문장\ntest_sentences = [\n    \"안녕\",\n    \"나랑 친구해줄래?\",\n    \"오늘 기분 어때?\",\n    \"너는 뭐하고 있어?\",\n    \"재밌는 영화 추천해줄래?\"\n]\n\n# 생성 문장 출력\nfor sentence in test_sentences:\n    predicted = sentence_generation_advanced(\n        sentence,\n        max_length=31,\n        temperature=0.8,\n        top_k=50,\n        top_p=0.9,\n        repetition_penalty=1.2\n    )\n    print(\"입력 :\", sentence)\n    print(\"출력 :\", predicted)\n    print(\"-\"*50)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-14T15:14:41.340594Z","iopub.execute_input":"2025-10-14T15:14:41.340895Z","iopub.status.idle":"2025-10-14T15:15:26.619244Z","shell.execute_reply.started":"2025-10-14T15:14:41.340878Z","shell.execute_reply":"2025-10-14T15:15:26.618394Z"}},"outputs":[{"name":"stdout","text":"입력 : 안녕\n출력 : 잊혀지지 ��주변 �를 트 �귀 �-초로초버리세요초시초��-초-���-네초�초\n--------------------------------------------------\n입력 : 나랑 친구해줄래?\n출력 : 된 당신이 친구가 좋아하는 구구오래 진짜 어진짜 어진짜 어당힘내세요다가 드셔보세요존중사람들이 후어진짜 빨리 �힘내세요진짜 이유를 사람들이 분이 이유를 입니다\n--------------------------------------------------\n입력 : 오늘 기분 어때?\n출력 : 치기박된 드셔보세요성모습�름�만에 에 감정은 ��배 . 감정은 주변에 감정은 하다가 귀 �에 \n--------------------------------------------------\n입력 : 너는 뭐하고 있어?\n출력 : 된 당신이 직접 좋아하는 친구가 좋아하는 좋아하는 오래 안구좋아하는 좋아하는 상좋아하는 좋아하는 식수정좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 좋아하는 정사람들이 좋아하는 좋아하는 좋아하는 좋아하는 \n--------------------------------------------------\n입력 : 재밌는 영화 추천해줄래?\n출력 : 된 다고 보다 오래 정이유를 정존중니 명니 아무 니 드셔보세요존중존중존중에 요요고 니 스는 존중? 존중존중프려는 머리랑 우\n--------------------------------------------------\n","output_type":"stream"}],"execution_count":39},{"cell_type":"markdown","source":"총평\n\n- 보다 일반적인 결과를 보고자 custom으로 구현한 방식이 아닌 keras 내장함수를 활용하여 챗봇 만들기를 진행하였습니다.\n- 배운 지식을 토대로 다양한 방식으로 학습을 시도했지만, 틀린 정답을 반복적으로 학습하는 모습을 관찰했습니다.\n- 이번 경험을 통해 교사학습(Supervised Learning)의 필요성을 직접 체감할 수 있었습니다.\n- 혼자 실험을 진행하며 학습이 원활하지 않았던 이유로는 다음과 같은 가능성을 생각해볼 수 있습니다:\n    - 한국어의 교착어 특성 때문에 subword 기반 토큰화가 항상 적절하지 않을 수 있음\n    - 데이터셋 품질이나 양의 문제도 학습 성능에 영향을 미쳤을 가능성\n- 향후에는 데이터 전처리 개선, 토큰화 전략 다양화, 그리고 teacher forcing을 활용한 학습을 시도해 보는 것이 필요할 것 같습니다.","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}