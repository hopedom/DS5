{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f98f0672",
   "metadata": {
    "id": "G0kpxFS1RFpm",
    "papermill": {
     "duration": 0.01233,
     "end_time": "2025-10-14T15:33:38.523064",
     "exception": false,
     "start_time": "2025-10-14T15:33:38.510734",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 프로젝트: 한국어 데이터로 챗봇 만들기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f465c83d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:33:38.539768Z",
     "iopub.status.busy": "2025-10-14T15:33:38.539533Z",
     "iopub.status.idle": "2025-10-14T15:33:54.321871Z",
     "shell.execute_reply": "2025-10-14T15:33:54.320961Z"
    },
    "id": "QqVqPHf2Q64L",
    "outputId": "c191350d-825d-421e-a253-fee7cae342c1",
    "papermill": {
     "duration": 15.792072,
     "end_time": "2025-10-14T15:33:54.323143",
     "exception": false,
     "start_time": "2025-10-14T15:33:38.531071",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-10-14 15:33:40.282744: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1760456020.531972      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1760456020.599651      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.18.0\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "\n",
    "print(tf.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff564c9d",
   "metadata": {
    "id": "MluypzgzRTQE",
    "papermill": {
     "duration": 0.007778,
     "end_time": "2025-10-14T15:33:54.339709",
     "exception": false,
     "start_time": "2025-10-14T15:33:54.331931",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "과정 개요\n",
    "___\n",
    "\n",
    "Step 1. 데이터 수집하기\n",
    "- 한국어 챗봇 데이터는 [송영숙님이 공개한 챗봇 데이터](https://github.com/songys/Chatbot_data/blob/master/ChatbotData.csv)를 사용합니다.\n",
    "\n",
    "Step 2. 데이터 전처리하기\n",
    "- 영어 데이터와는 전혀 다른 데이터인 만큼 영어 데이터에 사용했던 전처리와 일부 동일한 전처리도 필요하겠지만 전체적으로는 다른 전처리를 수행해야 할 수도 있습니다.\n",
    "\n",
    "Step 3. SubwordTextEncoder 사용하기\n",
    "- 한국어 데이터는 형태소 분석기를 사용하여 토크나이징을 해야 한다고 많은 분이 알고 있습니다. 하지만 여기서는 형태소 분석기가 아닌 위 실습에서 사용했던 내부 단어 토크나이저인 SubwordTextEncoder를 그대로 사용해보세요.\n",
    "\n",
    "Step 4. 모델 구성하기\n",
    "- 위 실습 내용을 참고하여 트랜스포머 모델을 구현합니다.\n",
    "\n",
    "Step 5. 모델 평가하기\n",
    "- Step 1에서 선택한 전처리 방법을 고려하여 입력된 문장에 대해서 대답을 얻는 예측 함수를 만듭니다."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bc1e9ec",
   "metadata": {
    "id": "gMVEWiNHUSg6",
    "papermill": {
     "duration": 0.007896,
     "end_time": "2025-10-14T15:33:54.355538",
     "exception": false,
     "start_time": "2025-10-14T15:33:54.347642",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 1. 데이터 수집하기\n",
    "- 한국어 챗봇 데이터는 [송영숙님이 공개한 챗봇 데이터](https://github.com/songys/Chatbot_data/blob/master/ChatbotData.csv)를 사용합니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "076df493",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:33:54.372886Z",
     "iopub.status.busy": "2025-10-14T15:33:54.372245Z",
     "iopub.status.idle": "2025-10-14T15:33:54.898705Z",
     "shell.execute_reply": "2025-10-14T15:33:54.897957Z"
    },
    "id": "_mUUfxAJTuYh",
    "outputId": "5387f55c-0e72-4ddf-e279-a5a6edfd8ee1",
    "papermill": {
     "duration": 0.53665,
     "end_time": "2025-10-14T15:33:54.899957",
     "exception": false,
     "start_time": "2025-10-14T15:33:54.363307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2025-10-14 15:33:54--  https://raw.githubusercontent.com/songys/Chatbot_data/master/ChatbotData.csv\r\n",
      "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.111.133, 185.199.109.133, 185.199.108.133, ...\r\n",
      "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.111.133|:443... connected.\r\n",
      "HTTP request sent, awaiting response... 200 OK\r\n",
      "Length: 889842 (869K) [text/plain]\r\n",
      "Saving to: ‘ChatbotData.csv’\r\n",
      "\r\n",
      "ChatbotData.csv     100%[===================>] 868.99K  --.-KB/s    in 0.05s   \r\n",
      "\r\n",
      "2025-10-14 15:33:54 (18.4 MB/s) - ‘ChatbotData.csv’ saved [889842/889842]\r\n",
      "\r\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Q</th>\n",
       "      <th>A</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12시 땡!</td>\n",
       "      <td>하루가 또 가네요.</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1지망 학교 떨어졌어</td>\n",
       "      <td>위로해 드립니다.</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3박4일 놀러가고 싶다</td>\n",
       "      <td>여행은 언제나 좋죠.</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3박4일 정도 놀러가고 싶다</td>\n",
       "      <td>여행은 언제나 좋죠.</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>PPL 심하네</td>\n",
       "      <td>눈살이 찌푸려지죠.</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Q            A  label\n",
       "0           12시 땡!   하루가 또 가네요.      0\n",
       "1      1지망 학교 떨어졌어    위로해 드립니다.      0\n",
       "2     3박4일 놀러가고 싶다  여행은 언제나 좋죠.      0\n",
       "3  3박4일 정도 놀러가고 싶다  여행은 언제나 좋죠.      0\n",
       "4          PPL 심하네   눈살이 찌푸려지죠.      0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 데이터 받아오기\n",
    "!wget https://raw.githubusercontent.com/songys/Chatbot_data/master/ChatbotData.csv\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "chatbot_data = pd.read_csv('ChatbotData.csv')\n",
    "display(chatbot_data.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "37028e22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:33:54.918089Z",
     "iopub.status.busy": "2025-10-14T15:33:54.917842Z",
     "iopub.status.idle": "2025-10-14T15:33:54.922694Z",
     "shell.execute_reply": "2025-10-14T15:33:54.921957Z"
    },
    "id": "_wlnT1okUbt9",
    "outputId": "0db921df-9938-45ee-d535-3230cb78c365",
    "papermill": {
     "duration": 0.014835,
     "end_time": "2025-10-14T15:33:54.923743",
     "exception": false,
     "start_time": "2025-10-14T15:33:54.908908",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(11823, 3)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 쳇봇데이터 크기\n",
    "chatbot_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2938d94a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:33:54.940865Z",
     "iopub.status.busy": "2025-10-14T15:33:54.940664Z",
     "iopub.status.idle": "2025-10-14T15:33:55.428629Z",
     "shell.execute_reply": "2025-10-14T15:33:55.427839Z"
    },
    "id": "2IZl8lGUUoz1",
    "outputId": "3ab9a343-f822-4d9c-cb7f-df1e0df7fd2a",
    "papermill": {
     "duration": 0.497827,
     "end_time": "2025-10-14T15:33:55.429877",
     "exception": false,
     "start_time": "2025-10-14T15:33:54.932050",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'Distribution of sentence length of A'}, ylabel='Frequency'>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 문장 길이 분포\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(14,6))\n",
    "plt.subplot(121)\n",
    "chatbot_data.Q.apply(lambda x: len(x)).plot(kind='hist', title='Distribution of sentence length of Q')\n",
    "\n",
    "plt.subplot(122)\n",
    "chatbot_data.A.apply(lambda x: len(x)).plot(kind='hist', title='Distribution of sentence length of A')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cea1d027",
   "metadata": {
    "id": "oPZpyRr9UXrw",
    "papermill": {
     "duration": 0.008732,
     "end_time": "2025-10-14T15:33:55.448160",
     "exception": false,
     "start_time": "2025-10-14T15:33:55.439428",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 2. 데이터 전처리하기\n",
    "- 원활한 토큰화 작업을 위한 데이터 전처리 작업을 수행하였습니다.\n",
    "- 세부 내용\n",
    "  - `양쪽 공백 제거`, `다양한 형태의 구두점 통일`, `연속되는 문장 부호 처리`, `특수문자 제거`, `문장 부호 주위 공백 추가`, `연속 공백 처리` 등\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6d1934b",
   "metadata": {
    "id": "6jCx5GPa0Tdw",
    "papermill": {
     "duration": 0.00861,
     "end_time": "2025-10-14T15:33:55.465644",
     "exception": false,
     "start_time": "2025-10-14T15:33:55.457034",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### check_varied_punctuation(sentence)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f2c91f5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:33:55.484332Z",
     "iopub.status.busy": "2025-10-14T15:33:55.483618Z",
     "iopub.status.idle": "2025-10-14T15:33:55.506195Z",
     "shell.execute_reply": "2025-10-14T15:33:55.505306Z"
    },
    "id": "tx6BVoJnlXUD",
    "outputId": "ff5a54a0-29f4-401f-e0d9-b6058af08d97",
    "papermill": {
     "duration": 0.032788,
     "end_time": "2025-10-14T15:33:55.507222",
     "exception": false,
     "start_time": "2025-10-14T15:33:55.474434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "구두점 확인 Q column:\n",
      "Q: 나는 좋은데 ….\n",
      "Q: 떠나요~ 제주도~\n",
      "Q: 바람쐬러 정동진가~~\n",
      "Q: 스트레스~\n",
      "Q: 와인 한잔 짠~\n",
      "Q: 으으~ 떨린다\n",
      "Q: 15년…안녕\n",
      "Q: 같이 보고싶어서 올려~\n",
      "Q: 나는 좋은데 ….\n",
      "Q: 비많이오네~\n",
      "Q: 삼십대를 훌러덩~~~~\n",
      "Q: 소식이 궁금해~\n",
      "Q: 속시원해~~안녕 잘가~~~\n",
      "Q: 아휴~ 싱숭생숭한 하루\n",
      "Q: 여자친구 만나고왔어~\n",
      "Q: 오늘도출근해~\n",
      "Q: 완전히 끝났어~\n",
      "Q: 요즘은 솔로인게 좋네~!!\n",
      "Q: 윤종신 '좋니' 노래 가사가 엄청 와닿네\n",
      "Q: 이것 또한 받아들이는 것이겠죠~??\n",
      "Q: 이런 여자.이런남자.안대용~\n",
      "Q: 이야기를 한번 해보려 합니다~\n",
      "Q: 자야하는데~~\n",
      "Q: 점심시간잠깐 그녀가 저에게 했던 말들이 떠오르네~ㅠㅠ\n",
      "Q: 카톡프로필~~~보고왔는데.\n",
      "Q: 퇴근했어~근데\n",
      "Q: 헤어진지 3주차 넘어가네~\n",
      "Q: 헤어진지 6개월여~\n",
      "Q: 휴~~ 이제 글쓰는것도 멈춰야 할까\n",
      "Q: 흐잌~~ 불금이닷~~ㅠㅠ\n",
      "Q: 사귀는 사이인데 '야'라고 해. 기분 나쁜데 어떡해?\n",
      "\n",
      "구두점 확인 A column:\n",
      "A: 밥 사줄 친구를 찾아 보세요~\n",
      "A: 밥 사줄 친구를 찾아 보세요~\n",
      "A: 시원한 물이라도 한 잔 드세요~\n",
      "A: 시원한 물이라도 한 잔 드세요~\n",
      "A: 퍼가요~\n",
      "A: 퍼가요~\n",
      "A: 음~ 곰곰히 생각해보세요.\n",
      "A: 음~ 곰곰히 생각해보세요.\n",
      "A: 뭘 다운 받으신 건지…\n",
      "A: 뭘 다운 받으신 건지…\n",
      "A: 으아~ 충전하세요.\n",
      "A: 으아~ 충전하세요.\n",
      "A: 워워~ 진정하세요.\n",
      "A: 저는 '설레'라고 저장할래요.\n",
      "A: 잘자요', '내일도 보고싶어요' 라고 하는 건 어떨까요?\n",
      "A: 애들아~ 여기 깨 쏟아진다.\n",
      "A: 꺼진 사랑도 다시 보자~ 다시 타오를수도 있어요.\n"
     ]
    }
   ],
   "source": [
    "# 다양한 형태의 구두점 포함 여부 확인 함수\n",
    "import re\n",
    "\n",
    "def check_varied_punctuation(sentence):\n",
    "    # 다양한 형태의 따옴표, 대시, 줄임표 등을 찾는 패턴\n",
    "    varied_punctuation_pattern = r\"['\\\"`‘’“”‒–—―~…]\"\n",
    "    return re.search(varied_punctuation_pattern, sentence) is not None\n",
    "\n",
    "# 데이터셋에서 다양한 형태의 구두점이 포함된 문장 예시 출력\n",
    "print(\"구두점 확인 Q column:\")\n",
    "count_q = 0\n",
    "for sentence in chatbot_data['Q']:\n",
    "    if check_varied_punctuation(sentence):\n",
    "        print(f\"Q: {sentence}\")\n",
    "\n",
    "print(\"\\n구두점 확인 A column:\")\n",
    "count_a = 0\n",
    "for sentence in chatbot_data['A']:\n",
    "    if check_varied_punctuation(sentence):\n",
    "        print(f\"A: {sentence}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47428a60",
   "metadata": {
    "papermill": {
     "duration": 0.00864,
     "end_time": "2025-10-14T15:33:55.525367",
     "exception": false,
     "start_time": "2025-10-14T15:33:55.516727",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "위 결과를 토대로 전처리 함수(`preprocess_sentence`)를 구성하였습니다. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7db4a6e",
   "metadata": {
    "id": "2FeWEyLZ0N34",
    "papermill": {
     "duration": 0.008761,
     "end_time": "2025-10-14T15:33:55.542709",
     "exception": false,
     "start_time": "2025-10-14T15:33:55.533948",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### preprocess_sentence(sentence)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f415c160",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:33:55.561151Z",
     "iopub.status.busy": "2025-10-14T15:33:55.560940Z",
     "iopub.status.idle": "2025-10-14T15:33:55.566557Z",
     "shell.execute_reply": "2025-10-14T15:33:55.565856Z"
    },
    "id": "4_UwZmxbhTvF",
    "papermill": {
     "duration": 0.015931,
     "end_time": "2025-10-14T15:33:55.567580",
     "exception": false,
     "start_time": "2025-10-14T15:33:55.551649",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 데이터 전처리 함수 정의\n",
    "import re\n",
    "\n",
    "def preprocess_sentence(sentence):\n",
    "    # 1. 기본 공백 제거\n",
    "    sentence = sentence.strip()\n",
    "\n",
    "    # 2. 따옴표, 대시 통일\n",
    "    sentence = re.sub(r\"['\\\"`‘’“”]\", \"'\", sentence)\n",
    "    sentence = re.sub(r\"[‒–—―]\", \"-\", sentence)\n",
    "\n",
    "    # 3. 구두점 반복 통일\n",
    "    sentence = re.sub(r\"[.!?~]+\", lambda m: m.group(0)[0], sentence)\n",
    "\n",
    "    # sentence = re.sub(r\"[.]+\", \".\", sentence) # .. → .\n",
    "    # sentence = re.sub(r\"[?]+\", \"?\", sentence) # ?? → ?\n",
    "    # sentence = re.sub(r\"[~]+\", \"~\", sentence) # ~~ → ~\n",
    "    # sentence = re.sub(r\"[!]+\", \"!\", sentence) # !! → !\n",
    "    \n",
    "    # 4. 특수문자 제거\n",
    "    # 허용된 문장 부호: 마침표, 물음표, 느낌표, 쉼표, 작은따옴표, 하이픈\n",
    "    sentence = re.sub(r\"[^가-힣a-zA-Z0-9?.!, '\\-]+\", \" \", sentence)\n",
    "\n",
    "    # 5. 영어/숫자 변환\n",
    "    sentence = re.sub(r\"[0-9]+\", \"<NUM>\", sentence)\n",
    "    sentence = re.sub(r\"[a-zA-Z]{5,}\", \"<ENG>\", sentence)\n",
    "    \n",
    "    # 5. 문장부호 주변 공백 추가 (학습을 위한 토큰 분리)\n",
    "    sentence = re.sub(r\"([?.!,~])\", r\" \\1 \", sentence)\n",
    "    sentence = re.sub(r\"\\s+([?.!,~])\", r\"\\1\", sentence)\n",
    "    \n",
    "    # 6. 감정 표현 토큰화\n",
    "    sentence = re.sub(r\"(ㅋㅋ+|ㅎㅎ+|ㅠ+|ㅜ+)\", lambda m: m.group(1)[0:2], sentence) \n",
    "    sentence = re.sub(r\"(ㅠ+|ㅜ+|ㅋㅋ+|ㅎㅎ+)\", r\" \\1 \", sentence)\n",
    "\n",
    "    # 7. 공백 정리\n",
    "    sentence = re.sub(r\"\\s*\\.\\s*\", \" . \", sentence)\n",
    "    sentence = re.sub(r'[\" \"]+', \" \", sentence).strip()\n",
    "\n",
    "    return sentence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "eb2bd902",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:33:55.585547Z",
     "iopub.status.busy": "2025-10-14T15:33:55.585358Z",
     "iopub.status.idle": "2025-10-14T15:33:55.988680Z",
     "shell.execute_reply": "2025-10-14T15:33:55.988071Z"
    },
    "id": "4174129b",
    "outputId": "41f28884-0cde-4a89-e7c8-1c1f09b3f330",
    "papermill": {
     "duration": 0.413652,
     "end_time": "2025-10-14T15:33:55.989774",
     "exception": false,
     "start_time": "2025-10-14T15:33:55.576122",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Q</th>\n",
       "      <th>A</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>&lt;NUM&gt;시 땡!</td>\n",
       "      <td>하루가 또 가네요 .</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>&lt;NUM&gt;지망 학교 떨어졌어</td>\n",
       "      <td>위로해 드립니다 .</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>&lt;NUM&gt;박&lt;NUM&gt;일 놀러가고 싶다</td>\n",
       "      <td>여행은 언제나 좋죠 .</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>&lt;NUM&gt;박&lt;NUM&gt;일 정도 놀러가고 싶다</td>\n",
       "      <td>여행은 언제나 좋죠 .</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>PPL 심하네</td>\n",
       "      <td>눈살이 찌푸려지죠 .</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Q             A  label\n",
       "0                <NUM>시 땡!   하루가 또 가네요 .      0\n",
       "1          <NUM>지망 학교 떨어졌어    위로해 드립니다 .      0\n",
       "2     <NUM>박<NUM>일 놀러가고 싶다  여행은 언제나 좋죠 .      0\n",
       "3  <NUM>박<NUM>일 정도 놀러가고 싶다  여행은 언제나 좋죠 .      0\n",
       "4                  PPL 심하네   눈살이 찌푸려지죠 .      0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 'Q' 와 'A' 열에 전처리 함수 적용\n",
    "chatbot_data['Q'] = chatbot_data['Q'].apply(preprocess_sentence)\n",
    "chatbot_data['A'] = chatbot_data['A'].apply(preprocess_sentence)\n",
    "\n",
    "display(chatbot_data.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "55a9b180",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:33:56.008492Z",
     "iopub.status.busy": "2025-10-14T15:33:56.008087Z",
     "iopub.status.idle": "2025-10-14T15:33:56.028612Z",
     "shell.execute_reply": "2025-10-14T15:33:56.027970Z"
    },
    "id": "Ye4PpUdltK2H",
    "outputId": "870f4726-f9bf-476e-93ad-96d522ade561",
    "papermill": {
     "duration": 0.030915,
     "end_time": "2025-10-14T15:33:56.029643",
     "exception": false,
     "start_time": "2025-10-14T15:33:55.998728",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "구두점 확인 Q column:\n",
      "Q: 윤종신 '좋니' 노래 가사가 엄청 와닿네\n",
      "Q: 사귀는 사이인데 '야'라고 해 . 기분 나쁜데 어떡해?\n",
      "\n",
      "구두점 확인 A column:\n",
      "A: 저는 '설레'라고 저장할래요 .\n",
      "A: 잘자요', '내일도 보고싶어요' 라고 하는 건 어떨까요?\n"
     ]
    }
   ],
   "source": [
    "# 다양한 형태의 구두점 포함 여부 확인 함수\n",
    "import re\n",
    "\n",
    "# 데이터셋에서 다양한 형태의 구두점이 포함된 문장 예시 출력\n",
    "print(\"구두점 확인 Q column:\")\n",
    "count_q = 0\n",
    "for sentence in chatbot_data['Q']:\n",
    "    if check_varied_punctuation(sentence):\n",
    "        print(f\"Q: {sentence}\")\n",
    "\n",
    "print(\"\\n구두점 확인 A column:\")\n",
    "count_a = 0\n",
    "for sentence in chatbot_data['A']:\n",
    "    if check_varied_punctuation(sentence):\n",
    "        print(f\"A: {sentence}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e0107da2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:33:56.049372Z",
     "iopub.status.busy": "2025-10-14T15:33:56.048755Z",
     "iopub.status.idle": "2025-10-14T15:33:56.053310Z",
     "shell.execute_reply": "2025-10-14T15:33:56.052746Z"
    },
    "id": "oIcB3qNlhyz1",
    "outputId": "e6238c04-b7ae-4af5-8b2b-8ee89cfc3b97",
    "papermill": {
     "duration": 0.015685,
     "end_time": "2025-10-14T15:33:56.054355",
     "exception": false,
     "start_time": "2025-10-14T15:33:56.038670",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "questions 샘플 수 : 11823\n",
      "answers 샘플 수 : 11823\n"
     ]
    }
   ],
   "source": [
    "# 질문을 questions, 답변을 answers에 저장\n",
    "questions = chatbot_data['Q'].tolist()\n",
    "answers = chatbot_data['A'].tolist()\n",
    "\n",
    "print('questions 샘플 수 :', len(questions))\n",
    "print('answers 샘플 수 :', len(answers))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "94782222",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:33:56.073638Z",
     "iopub.status.busy": "2025-10-14T15:33:56.073066Z",
     "iopub.status.idle": "2025-10-14T15:33:56.077015Z",
     "shell.execute_reply": "2025-10-14T15:33:56.076328Z"
    },
    "id": "Xg9OTfC-h9sl",
    "outputId": "5a10edc0-cb38-4820-a235-e5cc6b419cb9",
    "papermill": {
     "duration": 0.014723,
     "end_time": "2025-10-14T15:33:56.078115",
     "exception": false,
     "start_time": "2025-10-14T15:33:56.063392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "전처리 후 질문 샘플: 확실히 좋아하는 데도 관심 있는거 티 안내려고 선톡 안하고 일부러 늦게 보내고 그러는 사람도 있어요?\n",
      "전처리 후 답변 샘플: 많이 있어요 .\n"
     ]
    }
   ],
   "source": [
    "print('전처리 후 질문 샘플: {}'.format(questions[11810]))\n",
    "print('전처리 후 답변 샘플: {}'.format(answers[11810]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aaf1d5a4",
   "metadata": {
    "id": "463e3c5e",
    "papermill": {
     "duration": 0.008683,
     "end_time": "2025-10-14T15:33:56.095742",
     "exception": false,
     "start_time": "2025-10-14T15:33:56.087059",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 3. SubwordTextEncoder 사용하기\n",
    "- `단어장 만들기(SubwordTextEncoder 활용)`, `시작/종료 토큰 추가`\n",
    "- `정수 인코딩(tokenizer.encode 활용) 및 패딩`\n",
    "- `교사강요를 위한 데이터셋 준비`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28aade91",
   "metadata": {
    "id": "T8sHpac9A2_Z",
    "papermill": {
     "duration": 0.008688,
     "end_time": "2025-10-14T15:33:56.113311",
     "exception": false,
     "start_time": "2025-10-14T15:33:56.104623",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 단어장 만들기\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e5548137",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:33:56.132436Z",
     "iopub.status.busy": "2025-10-14T15:33:56.131887Z",
     "iopub.status.idle": "2025-10-14T15:34:05.856564Z",
     "shell.execute_reply": "2025-10-14T15:34:05.855673Z"
    },
    "id": "46a77298",
    "outputId": "7de15cc4-6081-42cf-fcbf-9cce76b36402",
    "papermill": {
     "duration": 9.735356,
     "end_time": "2025-10-14T15:34:05.857771",
     "exception": false,
     "start_time": "2025-10-14T15:33:56.122415",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "START_TOKEN의 번호 : [8130]\n",
      "END_TOKEN의 번호 : [8131]\n",
      "단어 사전 크기: 8132\n"
     ]
    }
   ],
   "source": [
    "# SubwordTextEncoder 활용 토큰화\n",
    "import tensorflow_datasets as tfds\n",
    "import tensorflow as tf\n",
    "\n",
    "# 질문과 답변 데이터를 합쳐서 단어 사전을 만듭니다.\n",
    "tokenizer = tfds.deprecated.text.SubwordTextEncoder.build_from_corpus(\n",
    "    questions + answers, target_vocab_size=2**13)\n",
    "\n",
    "# 시작 토큰과 종료 토큰 추가\n",
    "START_TOKEN, END_TOKEN = [tokenizer.vocab_size], [tokenizer.vocab_size + 1]\n",
    "\n",
    "# 시작 토큰과 종료 토큰을 고려하여 +2를 하여 단어장의 크기를 산정합니다.\n",
    "VOCAB_SIZE = tokenizer.vocab_size + 2\n",
    "\n",
    "print('START_TOKEN의 번호 :' ,[tokenizer.vocab_size])\n",
    "print('END_TOKEN의 번호 :' ,[tokenizer.vocab_size + 1])\n",
    "print(f'단어 사전 크기: {VOCAB_SIZE}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77c2f04d",
   "metadata": {
    "id": "STIBfc67A67W",
    "papermill": {
     "duration": 0.009016,
     "end_time": "2025-10-14T15:34:05.876708",
     "exception": false,
     "start_time": "2025-10-14T15:34:05.867692",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 정수 인코딩 및 패딩 적용\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f1e7dd10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:34:05.896447Z",
     "iopub.status.busy": "2025-10-14T15:34:05.895610Z",
     "iopub.status.idle": "2025-10-14T15:34:05.900948Z",
     "shell.execute_reply": "2025-10-14T15:34:05.900317Z"
    },
    "id": "a649ef93",
    "outputId": "57871381-d6ef-4ede-97c1-7de1eafac92b",
    "papermill": {
     "duration": 0.01607,
     "end_time": "2025-10-14T15:34:05.901901",
     "exception": false,
     "start_time": "2025-10-14T15:34:05.885831",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original string: 가스비 비싼데 감기 걸리겠어\n",
      "Encoded string: [5745, 611, 3500, 141, 685, 3735, 844]\n",
      "Decoded string: 가스비 비싼데 감기 걸리겠어\n"
     ]
    }
   ],
   "source": [
    "# 정수 인코딩 및 디코딩: 샘플 테스트\n",
    "sample_string = questions[20]\n",
    "encoded_string = tokenizer.encode(sample_string)\n",
    "\n",
    "print(f'Original string: {sample_string}')\n",
    "print(f'Encoded string: {encoded_string}')\n",
    "\n",
    "# 인코딩된 문자열을 다시 디코딩하여 확인\n",
    "decoded_string = tokenizer.decode(encoded_string)\n",
    "print(f'Decoded string: {decoded_string}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a49ff0ed",
   "metadata": {
    "id": "yLO4Qdko8hDz",
    "papermill": {
     "duration": 0.009168,
     "end_time": "2025-10-14T15:34:05.920205",
     "exception": false,
     "start_time": "2025-10-14T15:34:05.911037",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### tokenize_and_filter(inputs, outputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "240dc5d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:34:05.939336Z",
     "iopub.status.busy": "2025-10-14T15:34:05.938915Z",
     "iopub.status.idle": "2025-10-14T15:34:05.943764Z",
     "shell.execute_reply": "2025-10-14T15:34:05.942971Z"
    },
    "id": "_2E5AUqv8tTp",
    "papermill": {
     "duration": 0.015575,
     "end_time": "2025-10-14T15:34:05.944828",
     "exception": false,
     "start_time": "2025-10-14T15:34:05.929253",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 정수 인코딩 및 패딩 함수\n",
    "def tokenize_and_filter(inputs, outputs):\n",
    "    encoded_inputs = [START_TOKEN + tokenizer.encode(sentence) + END_TOKEN for sentence in inputs]\n",
    "    encoded_outputs = [START_TOKEN + tokenizer.encode(sentence) + END_TOKEN for sentence in outputs]\n",
    "\n",
    "    # 패딩을 위해 최대 길이 계산\n",
    "    max_length = max(max(len(x) for x in encoded_inputs), max(len(x) for x in encoded_outputs))\n",
    "\n",
    "    # 패딩 추가\n",
    "    padded_inputs = tf.keras.preprocessing.sequence.pad_sequences(\n",
    "        encoded_inputs, maxlen=max_length, padding='post')\n",
    "\n",
    "    padded_outputs = tf.keras.preprocessing.sequence.pad_sequences(\n",
    "        encoded_outputs, maxlen=max_length, padding='post')\n",
    "\n",
    "    return padded_inputs, padded_outputs, max_length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "eda1eed1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:34:05.963547Z",
     "iopub.status.busy": "2025-10-14T15:34:05.963355Z",
     "iopub.status.idle": "2025-10-14T15:34:06.631163Z",
     "shell.execute_reply": "2025-10-14T15:34:06.630314Z"
    },
    "id": "feda6a4f",
    "outputId": "57afe8c0-b4dc-4aa4-d178-69951c823a29",
    "papermill": {
     "duration": 0.678476,
     "end_time": "2025-10-14T15:34:06.632314",
     "exception": false,
     "start_time": "2025-10-14T15:34:05.953838",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "질문 데이터 shape: (11823, 31)\n",
      "답변 데이터 shape: (11823, 31)\n",
      "최대 시퀀스 길이: 31\n"
     ]
    }
   ],
   "source": [
    "questions_encoded, answers_encoded, max_sequence_length = tokenize_and_filter(questions, answers)\n",
    "\n",
    "print(f'질문 데이터 shape: {questions_encoded.shape}')\n",
    "print(f'답변 데이터 shape: {answers_encoded.shape}')\n",
    "print(f'최대 시퀀스 길이: {max_sequence_length}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2985b6c",
   "metadata": {
    "id": "TyA9fJRAA_qr",
    "papermill": {
     "duration": 0.009172,
     "end_time": "2025-10-14T15:34:06.651076",
     "exception": false,
     "start_time": "2025-10-14T15:34:06.641904",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 교사강요를 위한 데이터셋 준비"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e1ac6641",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:34:06.670519Z",
     "iopub.status.busy": "2025-10-14T15:34:06.669993Z",
     "iopub.status.idle": "2025-10-14T15:34:07.646443Z",
     "shell.execute_reply": "2025-10-14T15:34:07.645630Z"
    },
    "id": "K6Lk97hrAeZ8",
    "outputId": "31e14e74-ecd6-4005-8e2a-555fefd4be3f",
    "papermill": {
     "duration": 0.987567,
     "end_time": "2025-10-14T15:34:07.647728",
     "exception": false,
     "start_time": "2025-10-14T15:34:06.660161",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset created with batch size: 64\n",
      "Number of batches: 185\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1760456047.597243      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1760456047.597849      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n"
     ]
    }
   ],
   "source": [
    "BATCH_SIZE = 64\n",
    "\n",
    "# 인코더 입력: 질문 시퀀스 (questions_encoded)\n",
    "# 디코더 입력: 답변 시퀀스 (answers_encoded의 첫 번째 토큰부터 마지막 토큰 전까지)\n",
    "# 디코더 출력: 답변 시퀀스 (answers_encoded의 두 번째 토큰부터 마지막 토큰까지)\n",
    "\n",
    "# 데이터셋 생성\n",
    "dataset = tf.data.Dataset.from_tensor_slices((\n",
    "    {\n",
    "        \"inputs\": questions_encoded,\n",
    "        \"dec_inputs\": answers_encoded[:, :-1]\n",
    "    },\n",
    "    answers_encoded[:, 1:]\n",
    "))\n",
    "\n",
    "dataset = dataset.cache()\n",
    "dataset = dataset.shuffle(len(questions_encoded))\n",
    "dataset = dataset.batch(BATCH_SIZE)\n",
    "dataset = dataset.prefetch(tf.data.AUTOTUNE)\n",
    "\n",
    "print(f'Dataset created with batch size: {BATCH_SIZE}')\n",
    "print(f'Number of batches: {tf.data.experimental.cardinality(dataset).numpy()}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ad88ec1",
   "metadata": {
    "id": "c5b7ac4d",
    "papermill": {
     "duration": 0.009239,
     "end_time": "2025-10-14T15:34:07.666675",
     "exception": false,
     "start_time": "2025-10-14T15:34:07.657436",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 4. 모델 구성하기 (Keras 내장 레이어 활용)\n",
    "\n",
    "- 분석 프로젝트의 효율성을 위해 Keras 내장 레이어를 사용하여 트랜스포머 모델을 다시 구성합니다.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17fdaba4",
   "metadata": {
    "id": "wg4In6Ktan1e",
    "papermill": {
     "duration": 0.009125,
     "end_time": "2025-10-14T15:34:07.684980",
     "exception": false,
     "start_time": "2025-10-14T15:34:07.675855",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 트랜스포머 모델에 필요한 함수 및 레이어 정의\n",
    "- 어텐션 메커니즘, 마스크 생성, 포지셔널 인코딩 등 트랜스포머 모델 구축에 필요한 핵심 함수와 커스텀 레이어를 정의합니다.\n",
    "- 세부 내용\n",
    "  - `PositionalEncoding`, `mark` 는 학습노드 소스를 참조\n",
    "  - `Encoder`와 `Decoder` 내 MultiHeadAttention은 `tf.keras.layers.MultiHeadAttention` 활용\n",
    "    - `scaled_dot_product_attention` 연산은 위 레이어 내부 로직에 포함되어 있으므로 별도 구현하지 않음\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e08a017a",
   "metadata": {
    "id": "7LTVISDACZxI",
    "papermill": {
     "duration": 0.008974,
     "end_time": "2025-10-14T15:34:07.703167",
     "exception": false,
     "start_time": "2025-10-14T15:34:07.694193",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### PositionalEncoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "811f64ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:34:07.722408Z",
     "iopub.status.busy": "2025-10-14T15:34:07.722169Z",
     "iopub.status.idle": "2025-10-14T15:34:07.728997Z",
     "shell.execute_reply": "2025-10-14T15:34:07.728301Z"
    },
    "papermill": {
     "duration": 0.017742,
     "end_time": "2025-10-14T15:34:07.730103",
     "exception": false,
     "start_time": "2025-10-14T15:34:07.712361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class PositionalEncoding(tf.keras.layers.Layer):\n",
    "    def __init__(self, position, d_model):\n",
    "        super(PositionalEncoding, self).__init__()\n",
    "        self.pos_encoding = self.positional_encoding(position, d_model)\n",
    "\n",
    "    def get_angles(self, position, i, d_model):\n",
    "        angle_rates = 1 / tf.pow(10000.0, (2 * (i // 2)) / tf.cast(d_model, tf.float32))\n",
    "        return position * angle_rates\n",
    "\n",
    "    def positional_encoding(self, position, d_model):\n",
    "        # position: (position, 1)\n",
    "        # i: (1, d_model)\n",
    "        angle_rads = self.get_angles(\n",
    "            position=tf.cast(tf.range(position)[:, tf.newaxis], tf.float32),\n",
    "            i=tf.cast(tf.range(d_model)[tf.newaxis, :], tf.float32),\n",
    "            d_model=d_model\n",
    "        )\n",
    "\n",
    "        # 짝수 인덱스에는 sin, 홀수 인덱스에는 cos\n",
    "        sines = tf.math.sin(angle_rads[:, 0::2])\n",
    "        cosines = tf.math.cos(angle_rads[:, 1::2])\n",
    "\n",
    "        # sin과 cosine이 교차되도록 재배열\n",
    "        pos_encoding = tf.stack([sines, cosines], axis=0)\n",
    "        pos_encoding = tf.transpose(pos_encoding,[1, 2, 0])\n",
    "        pos_encoding = tf.reshape(pos_encoding, [position, d_model])\n",
    "        \n",
    "        # 배치에 더해질 수 있도록 [1, position, d_model]로 reshape\n",
    "        pos_encoding = pos_encoding[tf.newaxis, ...]\n",
    "\n",
    "        return tf.cast(pos_encoding, tf.float32)\n",
    "\n",
    "    def call(self, inputs):\n",
    "        # SparseTensor → Dense 변환 (필요시)\n",
    "        if isinstance(inputs, tf.SparseTensor):\n",
    "            inputs = tf.sparse.to_dense(inputs)\n",
    "\n",
    "        seq_len = tf.shape(inputs)[1]\n",
    "        return inputs + self.pos_encoding[:, :seq_len, :]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08f01786",
   "metadata": {
    "id": "2tLETibkK-vS",
    "papermill": {
     "duration": 0.009318,
     "end_time": "2025-10-14T15:34:07.748568",
     "exception": false,
     "start_time": "2025-10-14T15:34:07.739250",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### mask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "aad87d48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:34:07.768300Z",
     "iopub.status.busy": "2025-10-14T15:34:07.768074Z",
     "iopub.status.idle": "2025-10-14T15:34:07.772894Z",
     "shell.execute_reply": "2025-10-14T15:34:07.772385Z"
    },
    "id": "xLsYlO23CfBG",
    "papermill": {
     "duration": 0.01582,
     "end_time": "2025-10-14T15:34:07.773982",
     "exception": false,
     "start_time": "2025-10-14T15:34:07.758162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "\n",
    "# 패딩 마스크\n",
    "def create_padding_mask(x):\n",
    "    # x: (batch_size, seq_len)\n",
    "    mask = tf.cast(tf.math.equal(x, 0), tf.float32)\n",
    "    # shape: (batch_size, 1, 1, seq_len) for broadcasting in attention\n",
    "    return mask[:, tf.newaxis, tf.newaxis, :]\n",
    "\n",
    "# 룩 어헤드 마스크 + 패딩 마스크\n",
    "def create_look_ahead_mask(x):\n",
    "    seq_len = tf.shape(x)[1]\n",
    "    # look ahead mask: (seq_len, seq_len)\n",
    "    look_ahead_mask = 1 - tf.linalg.band_part(tf.ones((seq_len, seq_len)), -1, 0)\n",
    "    look_ahead_mask = look_ahead_mask[tf.newaxis, tf.newaxis, :, :]  # (1, 1, seq_len, seq_len)\n",
    "    \n",
    "    # padding mask: (batch_size, 1, 1, seq_len)\n",
    "    padding_mask = create_padding_mask(x)\n",
    "    \n",
    "    # combine: broadcast padding_mask to match look_ahead_mask shape\n",
    "    # padding_mask: (batch_size, 1, 1, seq_len) → (batch_size, 1, seq_len, seq_len)\n",
    "    padding_mask = tf.broadcast_to(padding_mask, [tf.shape(x)[0], 1, seq_len, seq_len])\n",
    "    \n",
    "    # 최종 마스크\n",
    "    combined_mask = tf.maximum(look_ahead_mask, padding_mask)\n",
    "    return combined_mask"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8783ff1",
   "metadata": {
    "id": "AHAZRazZbDlu",
    "papermill": {
     "duration": 0.009181,
     "end_time": "2025-10-14T15:34:07.792643",
     "exception": false,
     "start_time": "2025-10-14T15:34:07.783462",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 트랜스포머 모델 정의\n",
    "- 인코더와 디코더를 포함하는 전체 트랜스포머 모델 아키텍처를 정의합니다."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3b74fee",
   "metadata": {
    "id": "gXjJW3PrMFBj",
    "papermill": {
     "duration": 0.009025,
     "end_time": "2025-10-14T15:34:07.810819",
     "exception": false,
     "start_time": "2025-10-14T15:34:07.801794",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Encoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "eaa0d0cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:34:07.831647Z",
     "iopub.status.busy": "2025-10-14T15:34:07.831443Z",
     "iopub.status.idle": "2025-10-14T15:34:07.837840Z",
     "shell.execute_reply": "2025-10-14T15:34:07.837320Z"
    },
    "id": "69voCFtRF66Y",
    "papermill": {
     "duration": 0.018574,
     "end_time": "2025-10-14T15:34:07.838829",
     "exception": false,
     "start_time": "2025-10-14T15:34:07.820255",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class EncoderLayer(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate=0.1):\n",
    "        \"\"\"\n",
    "        트랜스포머 인코더의 단일 레이어를 정의합니다. Keras 내장 레이어를 활용합니다.\n",
    "\n",
    "        Args:\n",
    "            d_model: 모델의 임베딩 차원.\n",
    "            num_heads: 멀티 헤드 어텐션의 헤드 개수.\n",
    "            dff: 피드포워드 네트워크의 내부 차원.\n",
    "            rate: 드롭아웃 비율.\n",
    "        \"\"\"\n",
    "        \n",
    "        super(EncoderLayer, self).__init__()\n",
    "\n",
    "        # 첫 번째 레이어: 멀티 헤드 셀프 어텐션\n",
    "        # `scaled_dot_product_attention` 연산은 MultiHeadAttention 레이어 내부 로직에 포함되어 있으므로 별도 구현하지 않음\n",
    "        self.mha = tf.keras.layers.MultiHeadAttention(num_heads=num_heads, key_dim=d_model//num_heads)\n",
    "    \n",
    "        # 두 번째 레이어: 피드포워드 (2개의 Dense 레이어로 구성)\n",
    "        self.ffn = tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),  # (batch_size, seq_len, dff) - 차원 확장\n",
    "            tf.keras.layers.Dense(d_model)  # (batch_size, seq_len, d_model) - 원래 차원으로 복원\n",
    "        ])\n",
    "    \n",
    "        # 첫 번째 레이어 후의 레이어 정규화 및 드롭아웃\n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "        # 두 번째 레이어 후의 레이어 정규화 및 드롭아웃\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "\n",
    "    def call(self, x, training=False, mask=None):\n",
    "        \"\"\"\n",
    "        EncoderLayer의 forward pass를 정의합니다.\n",
    "    \n",
    "        Args:\n",
    "            x: 입력 텐서 (batch_size, input_seq_len, d_model).\n",
    "            training: 학습 중인지 여부를 나타내는 불리언 플래그.\n",
    "            mask: 어텐션 마스크 텐서 (패딩 마스크).\n",
    "    \n",
    "        Returns:\n",
    "            EncoderLayer의 최종 출력 텐서 (batch_size, input_seq_len, d_model).\n",
    "        \"\"\"\n",
    "\n",
    "        # Self-Attention\n",
    "        # 표준 Post-LN 방식: Add & Norm -> Dropout\n",
    "        attn_output = self.mha(query=x, value=x, key=x, attention_mask=mask)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        out1 = self.dropout1(out1, training=training)\n",
    "    \n",
    "        # Feed Forward\n",
    "        ffn_output = self.ffn(out1)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        out2 = self.dropout2(out2, training=training)\n",
    "\n",
    "        return out2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bc1c81f",
   "metadata": {
    "id": "6tkHK2dGSDIY",
    "papermill": {
     "duration": 0.008845,
     "end_time": "2025-10-14T15:34:07.856861",
     "exception": false,
     "start_time": "2025-10-14T15:34:07.848016",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "트랜스포머의 인코딩 레이어 내 dropout과 normliazation 진행 순서\n",
    "- `Pre-Layer Normalization (Pre-LN)` 방식과 `Post-Layer Normalization (Post-LN)` 방식이 있다고 합니다.\n",
    "  - Post-LN (표준): Add -> Norm -> Dropout 순서\n",
    "  - Pre-LN: Norm -> SubLayer -> Dropout -> Add 순서\n",
    "\n",
    "- 이 소스에서는 LMS 학습 시 진행한대로 Post-LN방식으로 학습하였습니다.\n",
    "- 추후 여유가 된다면 진행 순서를 변경하여 학습도 진행해보겠습니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0b9059b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:34:07.876246Z",
     "iopub.status.busy": "2025-10-14T15:34:07.876067Z",
     "iopub.status.idle": "2025-10-14T15:34:07.881844Z",
     "shell.execute_reply": "2025-10-14T15:34:07.881258Z"
    },
    "id": "vSBkVym4HRKM",
    "papermill": {
     "duration": 0.016641,
     "end_time": "2025-10-14T15:34:07.882804",
     "exception": false,
     "start_time": "2025-10-14T15:34:07.866163",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Keras 내장 레이어를 사용한 인코더\n",
    "class Encoder(tf.keras.layers.Layer):\n",
    "    def __init__(self, num_layers, d_model, num_heads, dff, input_vocab_size,\n",
    "                 maximum_position_encoding, rate=0.1):\n",
    "        \"\"\"\n",
    "        트랜스포머 인코더를 정의합니다. Keras 내장 레이어를 활용합니다.\n",
    "\n",
    "        Args:\n",
    "            num_layers: 인코더 레이어의 개수.\n",
    "            d_model: 모델의 임베딩 차원.\n",
    "            num_heads: 멀티 헤드 어텐션의 헤드 개수.\n",
    "            dff: 피드포워드 네트워크의 내부 차원.\n",
    "            input_vocab_size: 입력 단어 사전의 크기.\n",
    "            maximum_position_encoding: 최대 위치 인코딩 길이.\n",
    "            rate: 드롭아웃 비율.\n",
    "        \"\"\"\n",
    "        super(Encoder, self).__init__()\n",
    "        self.d_model = d_model\n",
    "        self.num_layers = num_layers\n",
    "\n",
    "        self.embedding = tf.keras.layers.Embedding(input_vocab_size, d_model)\n",
    "        self.pos_encoding = PositionalEncoding(maximum_position_encoding, d_model)\n",
    "        self.enc_layers = [EncoderLayer(d_model, num_heads, dff, rate)\n",
    "                           for _ in range(num_layers)]\n",
    "        self.dropout = tf.keras.layers.Dropout(rate)\n",
    "\n",
    "        \n",
    "    def call(self, x, training=False, mask=None):\n",
    "\n",
    "        \"\"\"\n",
    "        인코더의 forward pass를 정의합니다.\n",
    "\n",
    "        Args:\n",
    "            x: 인코더 입력 텐서 (batch_size, input_seq_len).\n",
    "            training: 학습 중인지 여부를 나타내는 불리언 플래그.\n",
    "            mask: 패딩 마스크 텐서.\n",
    "\n",
    "        Returns:\n",
    "            인코더의 최종 출력 텐서 (batch_size, input_seq_len, d_model).\n",
    "        \"\"\"\n",
    "        seq_len = tf.shape(x)[1]\n",
    "\n",
    "        # 1. 입력 토큰 임베딩\n",
    "        x = self.embedding(x)\n",
    "        x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32)) # 임베딩 값에 스케일링 적용\n",
    "\n",
    "        # 2. 포지셔널 인코딩\n",
    "        x = self.pos_encoding(x)\n",
    "\n",
    "        # 3. 드롭아웃\n",
    "        x = self.dropout(x, training=training)\n",
    "\n",
    "        # 4. 인코더 레이어 통과\n",
    "        for enc_layer in self.enc_layers:\n",
    "            x = enc_layer(x, training=training, mask=mask)\n",
    "            \n",
    "        return x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cac11087",
   "metadata": {
    "id": "vwuRvD58Ttd3",
    "papermill": {
     "duration": 0.009917,
     "end_time": "2025-10-14T15:34:07.901722",
     "exception": false,
     "start_time": "2025-10-14T15:34:07.891805",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Decoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3bcbf741",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:34:07.920915Z",
     "iopub.status.busy": "2025-10-14T15:34:07.920740Z",
     "iopub.status.idle": "2025-10-14T15:34:07.927757Z",
     "shell.execute_reply": "2025-10-14T15:34:07.927054Z"
    },
    "id": "tetm6tfSF9P1",
    "papermill": {
     "duration": 0.017952,
     "end_time": "2025-10-14T15:34:07.928785",
     "exception": false,
     "start_time": "2025-10-14T15:34:07.910833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Keras 내장 레이어를 사용한 디코더 레이어\n",
    "class DecoderLayer(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate=0.1):\n",
    "        \"\"\"\n",
    "        트랜스포머 디코더의 단일 레이어를 정의합니다. Keras 내장 레이어를 활용합니다.\n",
    "\n",
    "        Args:\n",
    "            d_model: 모델의 임베딩 차원.\n",
    "            num_heads: 멀티 헤드 어텐션의 헤드 개수.\n",
    "            dff: 피드포워드 네트워크의 내부 차원.\n",
    "            rate: 드롭아웃 비율.\n",
    "        \"\"\"\n",
    "        super(DecoderLayer, self).__init__()\n",
    "\n",
    "        # 첫 번째 레이어: 마스크된 멀티 헤드 셀프 어텐션\n",
    "        self.mha1 = tf.keras.layers.MultiHeadAttention(num_heads=num_heads, key_dim=d_model//num_heads)\n",
    "        \n",
    "        # 두 번째 레이어: 멀티 헤드 크로스 어텐션 (인코더-디코더 어텐션)\n",
    "        self.mha2 = tf.keras.layers.MultiHeadAttention(num_heads=num_heads, key_dim=d_model//num_heads)\n",
    "\n",
    "        # 세 번째 레이어: 피드포워드 (2개의 Dense 레이어로 구성)\n",
    "        self.ffn = tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "\n",
    "        # 각 레이어 후의 레이어 정규화 및 드롭아웃\n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "        self.layernorm3 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.dropout3 = tf.keras.layers.Dropout(rate)\n",
    "\n",
    "    \n",
    "    def call(self, x, enc_output, training=False, look_ahead_mask=None, padding_mask=None):\n",
    "\n",
    "        \"\"\"\n",
    "        DecoderLayer의 forward pass를 정의합니다.\n",
    "\n",
    "        Args:\n",
    "            x: 디코더 입력 텐서 (batch_size, target_seq_len, d_model). (shifted target sequence)\n",
    "            enc_output: 인코더의 최종 출력 텐서 (batch_size, input_seq_len, d_model).\n",
    "            training: 학습 중인지 여부를 나타내는 불리언 플래그.\n",
    "            look_ahead_mask: 디코더 셀프 어텐션을 위한 룩어헤드 마스크 (미래 토큰 마스킹).\n",
    "            padding_mask: 디코더 크로스 어텐션을 위한 패딩 마스크 (인코더 출력 패딩 마스킹).\n",
    "\n",
    "        Returns:\n",
    "            DecoderLayer의 최종 출력 텐서 (batch_size, target_seq_len, d_model).\n",
    "        \"\"\"\n",
    "        # enc_output.shape == (batch_size, input_seq_len, d_model)\n",
    "\n",
    "        # 1. 마스크된 셀프 어텐션\n",
    "        attn1 = self.mha1(query=x, value=x, key=x, attention_mask=look_ahead_mask)\n",
    "        out1 = self.layernorm1(x + attn1)\n",
    "        out1 = self.dropout1(out1, training=training)\n",
    "\n",
    "\n",
    "        # 2. 인코더-디코더 어텐션\n",
    "        attn2 = self.mha2(query=out1, value=enc_output, key=enc_output, attention_mask=padding_mask)\n",
    "        out2 = self.layernorm2(out1 + attn2)\n",
    "        out2 = self.dropout2(out2, training=training)\n",
    "\n",
    "        # 3. 피드포워드\n",
    "        ffn_output = self.ffn(out2)\n",
    "        out3 = self.layernorm3(out2 + ffn_output)\n",
    "        out3 = self.dropout3(out3, training=training)\n",
    "\n",
    "        return out3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f3ccc3f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:34:07.948502Z",
     "iopub.status.busy": "2025-10-14T15:34:07.948252Z",
     "iopub.status.idle": "2025-10-14T15:34:07.954320Z",
     "shell.execute_reply": "2025-10-14T15:34:07.953815Z"
    },
    "id": "VvJmECBPaLGB",
    "papermill": {
     "duration": 0.016759,
     "end_time": "2025-10-14T15:34:07.955262",
     "exception": false,
     "start_time": "2025-10-14T15:34:07.938503",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Keras 내장 레이어를 사용한 디코더\n",
    "class Decoder(tf.keras.layers.Layer):\n",
    "    def __init__(self, num_layers, d_model, num_heads, dff, target_vocab_size,\n",
    "                 maximum_position_encoding, rate=0.1):\n",
    "        \"\"\"\n",
    "        트랜스포머 디코더를 정의합니다. Keras 내장 레이어를 활용합니다.\n",
    "\n",
    "        Args:\n",
    "            num_layers: 디코더 레이어의 개수.\n",
    "            d_model: 모델의 임베딩 차원.\n",
    "            num_heads: 멀티 헤드 어텐션의 헤드 개수.\n",
    "            dff: 피드포워드 네트워크의 내부 차원.\n",
    "            target_vocab_size: 목표 단어 사전의 크기.\n",
    "            maximum_position_encoding: 최대 위치 인코딩 길이.\n",
    "            rate: 드롭아웃 비율.\n",
    "        \"\"\"\n",
    "        super(Decoder, self).__init__()\n",
    "\n",
    "        self.d_model = d_model\n",
    "        self.num_layers = num_layers\n",
    "\n",
    "        self.embedding = tf.keras.layers.Embedding(target_vocab_size, d_model)\n",
    "        self.pos_encoding = PositionalEncoding(maximum_position_encoding, d_model)\n",
    "        self.dec_layers = [DecoderLayer(d_model, num_heads, dff, rate)\n",
    "                           for _ in range(num_layers)]\n",
    "        self.dropout = tf.keras.layers.Dropout(rate)\n",
    "\n",
    "        \n",
    "    def call(self, x, enc_output, training=False, look_ahead_mask=None, padding_mask=None):\n",
    "        \"\"\"\n",
    "        디코더의 forward pass를 정의합니다.\n",
    "\n",
    "        Args:\n",
    "            x: 디코더 입력 텐서 (batch_size, target_seq_len). (shifted target sequence)\n",
    "            enc_output: 인코더의 최종 출력 텐서 (batch_size, input_seq_len, d_model).\n",
    "            training: 학습 중인지 여부를 나타내는 불리언 플래그.\n",
    "            look_ahead_mask: 디코더 셀프 어텐션을 위한 룩어헤드 마스크 (미래 토큰 마스킹).\n",
    "            padding_mask: 디코더 크로스 어텐션을 위한 패딩 마스크 (인코더 출력 패딩 마스킹).\n",
    "\n",
    "        Returns:\n",
    "            디코더의 최종 출력 텐서 (batch_size, target_seq_len, d_model).\n",
    "            (어텐션 가중치 반환은 선택 사항이며, DecoderLayer 클래스에서 설정해야 함)\n",
    "        \"\"\"\n",
    "        seq_len = tf.shape(x)[1]\n",
    "        \n",
    "        # 1. 목표 토큰 임베딩 (batch_size, seq_len, d_model)\n",
    "        x = self.embedding(x)\n",
    "        x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32)) # 임베딩 값에 스케일링 적용\n",
    "        x = self.pos_encoding(x)\n",
    "\n",
    "        # 2. 드롭아웃\n",
    "        x = self.dropout(x, training=training)\n",
    "\n",
    "        # 3. 디코더 레이어\n",
    "        for dec_layer in self.dec_layers:\n",
    "            x = dec_layer(x, enc_output, training=training,\n",
    "                          look_ahead_mask=look_ahead_mask, padding_mask=padding_mask)\n",
    "\n",
    "        return x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79d16887",
   "metadata": {
    "id": "Dq-ZkM1xaCaH",
    "papermill": {
     "duration": 0.009003,
     "end_time": "2025-10-14T15:34:07.973405",
     "exception": false,
     "start_time": "2025-10-14T15:34:07.964402",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Transformer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "12a383e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:34:07.992700Z",
     "iopub.status.busy": "2025-10-14T15:34:07.992488Z",
     "iopub.status.idle": "2025-10-14T15:34:07.999064Z",
     "shell.execute_reply": "2025-10-14T15:34:07.998566Z"
    },
    "id": "69263d22",
    "papermill": {
     "duration": 0.017503,
     "end_time": "2025-10-14T15:34:08.000028",
     "exception": false,
     "start_time": "2025-10-14T15:34:07.982525",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Keras 내장 레이어를 사용한 트랜스포머 모델\n",
    "class Transformer(tf.keras.Model):\n",
    "    def __init__(self, num_layers, d_model, num_heads, dff, input_vocab_size,\n",
    "                 target_vocab_size, pe_input, pe_target, rate=0.1):\n",
    "        \"\"\"\n",
    "        트랜스포머 모델을 정의합니다. 인코더, 디코더, 최종 선형 레이어로 구성됩니다.\n",
    "\n",
    "        Args:\n",
    "            num_layers: 인코더 및 디코더 레이어의 개수.\n",
    "            d_model: 모델의 임베딩 차원.\n",
    "            num_heads: 멀티 헤드 어텐션의 헤드 개수.\n",
    "            dff: 피드포워드 네트워크의 내부 차원.\n",
    "            input_vocab_size: 입력 단어 사전의 크기.\n",
    "            target_vocab_size: 목표 단어 사전의 크기.\n",
    "            pe_input: 인코더의 최대 위치 인코딩 길이.\n",
    "            pe_target: 디코더의 최대 위치 인코딩 길이.\n",
    "            rate: 드롭아웃 비율.\n",
    "        \"\"\"\n",
    "        super(Transformer, self).__init__()\n",
    "        self.encoder = Encoder(num_layers, d_model, num_heads, dff, input_vocab_size, pe_input, rate)\n",
    "        self.decoder = Decoder(num_layers, d_model, num_heads, dff, target_vocab_size, pe_target, rate)\n",
    "        self.final_layer = tf.keras.layers.Dense(target_vocab_size)\n",
    "\n",
    "        \n",
    "    def call(self, inputs, training=False):\n",
    "        \"\"\"\n",
    "        트랜스포머 모델의 forward pass를 정의합니다.\n",
    "\n",
    "        Args:\n",
    "            inputs: 입력 텐서 딕셔너리 {'inputs': 인코더 입력, 'dec_inputs': 디코더 입력}.\n",
    "            training: 학습 중인지 여부를 나타내는 불리언 플래그.\n",
    "\n",
    "        Returns:\n",
    "            최종 출력 텐서 (batch_size, tar_seq_len, target_vocab_size).\n",
    "            (어텐션 가중치 반환은 선택 사항이며, 필요 시 Decoder 클래스에서 설정해야 함)\n",
    "        \"\"\"\n",
    "\n",
    "        # 마스크 생성 (패딩 마스크, 룩어헤드 마스크)\n",
    "        enc_padding_mask, look_ahead_mask, dec_padding_mask = self.create_masks(inputs)\n",
    "\n",
    "        # 인코더 호출: 입력 시퀀스와 패딩 마스크 전달\n",
    "        enc_output = self.encoder(inputs['inputs'], training=training, mask=enc_padding_mask)\n",
    "        \n",
    "        # 디코더 호출: 디코더 입력, 인코더 출력, 룩어헤드 마스크, 디코더 패딩 마스크 전달\n",
    "        dec_output = self.decoder(inputs['dec_inputs'], enc_output, training=training,\n",
    "                                  look_ahead_mask=look_ahead_mask, padding_mask=dec_padding_mask)\n",
    "\n",
    "        # 최종 선형 레이어 통과: 디코더 출력을 단어 사전 차원으로 매핑\n",
    "        final_output = self.final_layer(dec_output)\n",
    "\n",
    "        return final_output\n",
    "\n",
    "    \n",
    "    def create_masks(self, inputs):\n",
    "        \"\"\"\n",
    "        인코더 및 디코더 어텐션을 위한 마스크를 생성합니다.\n",
    "\n",
    "        Args:\n",
    "            inputs: 입력 텐서 딕셔너리 {'inputs': 인코더 입력, 'dec_inputs': 디코더 입력}.\n",
    "\n",
    "        Returns:\n",
    "            enc_padding_mask: 인코더 self-attention을 위한 패딩 마스크.\n",
    "            combined_mask: 디코더 self-attention을 위한 룩어헤드 및 패딩 마스크.\n",
    "            dec_padding_mask: 디코더 cross-attention을 위한 패딩 마스크.\n",
    "        \"\"\"\n",
    "        # 입력 딕셔너리에서 텐서 가져오기\n",
    "        inp = inputs['inputs']\n",
    "        tar = inputs['dec_inputs']\n",
    "\n",
    "        enc_padding_mask = create_padding_mask(inp) # 인코더 self-attention용 패딩 마스크\n",
    "\n",
    "        look_ahead_mask = create_look_ahead_mask(tar)\n",
    "        dec_target_padding_mask = create_padding_mask(tar)\n",
    "        combined_mask = tf.maximum(dec_target_padding_mask, look_ahead_mask) # 디코더 self-attention용 룩어헤드 + 디코더 입력 패딩 마스크\n",
    "        \n",
    "        dec_padding_mask = create_padding_mask(inp) # 디코더 cross-attention용 인코더 출력 패딩 마스크\n",
    "\n",
    "        return enc_padding_mask, combined_mask, dec_padding_mask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "87143cf8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:34:08.018904Z",
     "iopub.status.busy": "2025-10-14T15:34:08.018711Z",
     "iopub.status.idle": "2025-10-14T15:34:09.218905Z",
     "shell.execute_reply": "2025-10-14T15:34:09.218309Z"
    },
    "papermill": {
     "duration": 1.211275,
     "end_time": "2025-10-14T15:34:09.220270",
     "exception": false,
     "start_time": "2025-10-14T15:34:08.008995",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 하이퍼파라미터 정의\n",
    "NUM_LAYERS = 8 # 6 -> 8\n",
    "D_MODEL = 256 # 256 -> 512\n",
    "NUM_HEADS = 8\n",
    "DFF = 512\n",
    "DROPOUT_RATE = 0.1\n",
    "\n",
    "# Transformer 모델 인스턴스 생성\n",
    "pe_input_length = max_sequence_length\n",
    "pe_target_length = max_sequence_length\n",
    "\n",
    "model = Transformer(\n",
    "    NUM_LAYERS, D_MODEL, NUM_HEADS, DFF,\n",
    "    VOCAB_SIZE, VOCAB_SIZE,\n",
    "    pe_input=pe_input_length,\n",
    "    pe_target=pe_target_length,\n",
    "    rate=DROPOUT_RATE\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8950cb9",
   "metadata": {
    "id": "0b860729",
    "papermill": {
     "duration": 0.009411,
     "end_time": "2025-10-14T15:34:09.239855",
     "exception": false,
     "start_time": "2025-10-14T15:34:09.230444",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 손실 함수 및 옵티마이저 설정\n",
    "\n",
    "- 모델 학습에 사용할 손실 함수와 옵티마이저를 설정합니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f2f7ea30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:34:09.259651Z",
     "iopub.status.busy": "2025-10-14T15:34:09.259171Z",
     "iopub.status.idle": "2025-10-14T15:34:09.263742Z",
     "shell.execute_reply": "2025-10-14T15:34:09.262961Z"
    },
    "papermill": {
     "duration": 0.015708,
     "end_time": "2025-10-14T15:34:09.264896",
     "exception": false,
     "start_time": "2025-10-14T15:34:09.249188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 패딩 토큰을 무시하는 손실 함수 정의\n",
    "\n",
    "def loss_function(real, pred):\n",
    "    loss_object = tf.keras.losses.SparseCategoricalCrossentropy(\n",
    "        from_logits=True, reduction='none')\n",
    "    \n",
    "    mask = tf.math.logical_not(tf.math.equal(real, 0))\n",
    "    loss_ = loss_object(real, pred)\n",
    "\n",
    "    mask = tf.cast(mask, dtype=loss_.dtype)\n",
    "    loss_ *= mask\n",
    "\n",
    "    return tf.reduce_sum(loss_)/tf.reduce_sum(mask)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "133058a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:34:09.285550Z",
     "iopub.status.busy": "2025-10-14T15:34:09.285082Z",
     "iopub.status.idle": "2025-10-14T15:34:09.290359Z",
     "shell.execute_reply": "2025-10-14T15:34:09.289584Z"
    },
    "papermill": {
     "duration": 0.016957,
     "end_time": "2025-10-14T15:34:09.291647",
     "exception": false,
     "start_time": "2025-10-14T15:34:09.274690",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class CustomSchedule(tf.keras.optimizers.schedules.LearningRateSchedule):\n",
    "    def __init__(self, d_model, warmup_steps=4000):\n",
    "        super(CustomSchedule, self).__init__()\n",
    "        self.d_model = tf.cast(d_model, tf.float32)\n",
    "        self.warmup_steps = warmup_steps\n",
    "\n",
    "    def __call__(self, step):\n",
    "        arg1 = tf.math.rsqrt(tf.cast(step, tf.float32))\n",
    "        arg2 = step * (self.warmup_steps ** -1.5)\n",
    "        return tf.math.rsqrt(self.d_model) * tf.math.minimum(arg1, arg2)\n",
    "\n",
    "    def get_config(self):\n",
    "        return {\n",
    "            \"d_model\": float(self.d_model.numpy()),  # d_model은 float32로 저장\n",
    "            \"warmup_steps\": self.warmup_steps\n",
    "        }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "faa623ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:34:09.312228Z",
     "iopub.status.busy": "2025-10-14T15:34:09.312024Z",
     "iopub.status.idle": "2025-10-14T15:34:09.934315Z",
     "shell.execute_reply": "2025-10-14T15:34:09.933536Z"
    },
    "papermill": {
     "duration": 0.633813,
     "end_time": "2025-10-14T15:34:09.935521",
     "exception": false,
     "start_time": "2025-10-14T15:34:09.301708",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Train Step')"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample_learning_rate = CustomSchedule(d_model=128)\n",
    "\n",
    "plt.plot(sample_learning_rate(tf.range(200000, dtype=tf.float32)))\n",
    "plt.ylabel(\"Learning Rate\")\n",
    "plt.xlabel(\"Train Step\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "3541710f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:34:09.957458Z",
     "iopub.status.busy": "2025-10-14T15:34:09.957199Z",
     "iopub.status.idle": "2025-10-14T15:34:09.965940Z",
     "shell.execute_reply": "2025-10-14T15:34:09.965327Z"
    },
    "papermill": {
     "duration": 0.020277,
     "end_time": "2025-10-14T15:34:09.967031",
     "exception": false,
     "start_time": "2025-10-14T15:34:09.946754",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 옵티마이저 설정\n",
    "learning_rate = CustomSchedule(D_MODEL) # D_MODEL은 모델 차원 수에 따라 설정해야 합니다.\n",
    "\n",
    "optimizer = tf.keras.optimizers.Adam(\n",
    "    learning_rate=CustomSchedule(D_MODEL),\n",
    "    beta_1=0.9, beta_2=0.98, epsilon=1e-9\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "714e38df",
   "metadata": {
    "id": "0ba88c51",
    "papermill": {
     "duration": 0.010004,
     "end_time": "2025-10-14T15:34:09.987096",
     "exception": false,
     "start_time": "2025-10-14T15:34:09.977092",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 모델 컴파일 및 학습\n",
    "\n",
    "- 정의된 모델을 컴파일하고 데이터를 사용하여 학습시킵니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "c0fb1967",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:34:10.007836Z",
     "iopub.status.busy": "2025-10-14T15:34:10.007655Z",
     "iopub.status.idle": "2025-10-14T15:34:10.017329Z",
     "shell.execute_reply": "2025-10-14T15:34:10.016619Z"
    },
    "papermill": {
     "duration": 0.021266,
     "end_time": "2025-10-14T15:34:10.018477",
     "exception": false,
     "start_time": "2025-10-14T15:34:09.997211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 학습/검증 데이터셋 분리\n",
    "val_size = int(0.1 * len(dataset))  # 10%를 검증용으로 사용\n",
    "train_dataset = dataset.skip(val_size)\n",
    "val_dataset = dataset.take(val_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "95eea1ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T15:34:10.039207Z",
     "iopub.status.busy": "2025-10-14T15:34:10.039014Z",
     "iopub.status.idle": "2025-10-14T16:16:31.975104Z",
     "shell.execute_reply": "2025-10-14T16:16:31.974442Z"
    },
    "id": "cffba054",
    "papermill": {
     "duration": 2541.947982,
     "end_time": "2025-10-14T16:16:31.976553",
     "exception": false,
     "start_time": "2025-10-14T15:34:10.028571",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1760456138.658576      60 service.cc:148] XLA service 0x79d1e4002ee0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1760456138.659601      60 service.cc:156]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\n",
      "I0000 00:00:1760456138.659620      60 service.cc:156]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\n",
      "W0000 00:00:1760456143.166169      60 assert_op.cc:38] Ignoring Assert operator compile_loss/loss_function/sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/assert_equal_1/Assert/Assert\n",
      "I0000 00:00:1760456146.229870      60 cuda_dnn.cc:529] Loaded cuDNN version 90300\n",
      "I0000 00:00:1760456182.231775      60 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m166/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 119ms/step - accuracy: 0.0129 - loss: 8.7936"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1760456205.989630      60 assert_op.cc:38] Ignoring Assert operator compile_loss/loss_function/sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/assert_equal_1/Assert/Assert\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 373ms/step - accuracy: 0.0130 - loss: 8.7915"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1760456248.563772      62 assert_op.cc:38] Ignoring Assert operator compile_loss/loss_function/sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/assert_equal_1/Assert/Assert\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m203s\u001b[0m 423ms/step - accuracy: 0.0131 - loss: 8.7895 - val_accuracy: 0.0641 - val_loss: 7.7003\n",
      "Epoch 2/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 135ms/step - accuracy: 0.0471 - loss: 7.4029 - val_accuracy: 0.0648 - val_loss: 6.2960\n",
      "Epoch 3/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 143ms/step - accuracy: 0.0652 - loss: 6.1475 - val_accuracy: 0.0678 - val_loss: 5.5842\n",
      "Epoch 4/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 146ms/step - accuracy: 0.0668 - loss: 5.5309 - val_accuracy: 0.0704 - val_loss: 5.1471\n",
      "Epoch 5/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 139ms/step - accuracy: 0.0708 - loss: 5.1310 - val_accuracy: 0.0714 - val_loss: 4.8817\n",
      "Epoch 6/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 139ms/step - accuracy: 0.0719 - loss: 4.8497 - val_accuracy: 0.0734 - val_loss: 4.5353\n",
      "Epoch 7/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 142ms/step - accuracy: 0.0741 - loss: 4.5497 - val_accuracy: 0.0776 - val_loss: 4.2421\n",
      "Epoch 8/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 142ms/step - accuracy: 0.0766 - loss: 4.3025 - val_accuracy: 0.0788 - val_loss: 4.0541\n",
      "Epoch 9/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 140ms/step - accuracy: 0.0789 - loss: 4.1292 - val_accuracy: 0.0815 - val_loss: 3.9092\n",
      "Epoch 10/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 140ms/step - accuracy: 0.0801 - loss: 3.9975 - val_accuracy: 0.0825 - val_loss: 3.7196\n",
      "Epoch 11/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 142ms/step - accuracy: 0.0815 - loss: 3.8487 - val_accuracy: 0.0820 - val_loss: 3.5768\n",
      "Epoch 12/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 142ms/step - accuracy: 0.0838 - loss: 3.7453 - val_accuracy: 0.0897 - val_loss: 3.5048\n",
      "Epoch 13/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 140ms/step - accuracy: 0.0849 - loss: 3.6390 - val_accuracy: 0.0895 - val_loss: 3.3880\n",
      "Epoch 14/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 140ms/step - accuracy: 0.0865 - loss: 3.5642 - val_accuracy: 0.0929 - val_loss: 3.2802\n",
      "Epoch 15/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 140ms/step - accuracy: 0.0878 - loss: 3.4289 - val_accuracy: 0.0945 - val_loss: 3.1492\n",
      "Epoch 16/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 141ms/step - accuracy: 0.0901 - loss: 3.3275 - val_accuracy: 0.0979 - val_loss: 3.0130\n",
      "Epoch 17/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.0913 - loss: 3.2395 - val_accuracy: 0.0970 - val_loss: 2.9582\n",
      "Epoch 18/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 142ms/step - accuracy: 0.0936 - loss: 3.1254 - val_accuracy: 0.0994 - val_loss: 2.8918\n",
      "Epoch 19/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 140ms/step - accuracy: 0.0962 - loss: 3.0276 - val_accuracy: 0.0998 - val_loss: 2.8700\n",
      "Epoch 20/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 140ms/step - accuracy: 0.0976 - loss: 2.9507 - val_accuracy: 0.1020 - val_loss: 2.6918\n",
      "Epoch 21/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 141ms/step - accuracy: 0.0981 - loss: 2.8826 - val_accuracy: 0.1054 - val_loss: 2.5879\n",
      "Epoch 22/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 141ms/step - accuracy: 0.1011 - loss: 2.7866 - val_accuracy: 0.1119 - val_loss: 2.3813\n",
      "Epoch 23/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.1033 - loss: 2.6882 - val_accuracy: 0.1181 - val_loss: 2.3210\n",
      "Epoch 24/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 140ms/step - accuracy: 0.1076 - loss: 2.5829 - val_accuracy: 0.1188 - val_loss: 2.2415\n",
      "Epoch 25/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.1086 - loss: 2.4924 - val_accuracy: 0.1239 - val_loss: 2.0528\n",
      "Epoch 26/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.1116 - loss: 2.3756 - val_accuracy: 0.1264 - val_loss: 1.9440\n",
      "Epoch 27/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 141ms/step - accuracy: 0.1144 - loss: 2.3030 - val_accuracy: 0.1361 - val_loss: 1.8029\n",
      "Epoch 28/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m25s\u001b[0m 148ms/step - accuracy: 0.1183 - loss: 2.1498 - val_accuracy: 0.1358 - val_loss: 1.6869\n",
      "Epoch 29/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 138ms/step - accuracy: 0.1218 - loss: 2.0541 - val_accuracy: 0.1405 - val_loss: 1.6571\n",
      "Epoch 30/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 138ms/step - accuracy: 0.1270 - loss: 1.9562 - val_accuracy: 0.1447 - val_loss: 1.5524\n",
      "Epoch 31/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 143ms/step - accuracy: 0.1292 - loss: 1.8603 - val_accuracy: 0.1454 - val_loss: 1.4919\n",
      "Epoch 32/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 142ms/step - accuracy: 0.1336 - loss: 1.7750 - val_accuracy: 0.1518 - val_loss: 1.3597\n",
      "Epoch 33/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 139ms/step - accuracy: 0.1375 - loss: 1.6598 - val_accuracy: 0.1583 - val_loss: 1.2241\n",
      "Epoch 34/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 140ms/step - accuracy: 0.1432 - loss: 1.5542 - val_accuracy: 0.1637 - val_loss: 1.1163\n",
      "Epoch 35/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.1458 - loss: 1.5063 - val_accuracy: 0.1702 - val_loss: 1.0531\n",
      "Epoch 36/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.1496 - loss: 1.3789 - val_accuracy: 0.1717 - val_loss: 0.9894\n",
      "Epoch 37/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 140ms/step - accuracy: 0.1530 - loss: 1.3337 - val_accuracy: 0.1796 - val_loss: 0.8810\n",
      "Epoch 38/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 140ms/step - accuracy: 0.1575 - loss: 1.2574 - val_accuracy: 0.1722 - val_loss: 0.8787\n",
      "Epoch 39/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.1609 - loss: 1.1785 - val_accuracy: 0.1808 - val_loss: 0.8101\n",
      "Epoch 40/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.1611 - loss: 1.1459 - val_accuracy: 0.1859 - val_loss: 0.7316\n",
      "Epoch 41/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.1647 - loss: 1.1033 - val_accuracy: 0.1801 - val_loss: 0.7406\n",
      "Epoch 42/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.1663 - loss: 1.0619 - val_accuracy: 0.1857 - val_loss: 0.6778\n",
      "Epoch 43/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.1712 - loss: 0.9903 - val_accuracy: 0.1909 - val_loss: 0.6333\n",
      "Epoch 44/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 140ms/step - accuracy: 0.1715 - loss: 0.9811 - val_accuracy: 0.1939 - val_loss: 0.5770\n",
      "Epoch 45/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 141ms/step - accuracy: 0.1736 - loss: 0.9286 - val_accuracy: 0.1941 - val_loss: 0.5608\n",
      "Epoch 46/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.1758 - loss: 0.8708 - val_accuracy: 0.1974 - val_loss: 0.4906\n",
      "Epoch 47/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.1791 - loss: 0.8389 - val_accuracy: 0.2010 - val_loss: 0.4862\n",
      "Epoch 48/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 142ms/step - accuracy: 0.1808 - loss: 0.7980 - val_accuracy: 0.2038 - val_loss: 0.4351\n",
      "Epoch 49/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 134ms/step - accuracy: 0.1816 - loss: 0.7833 - val_accuracy: 0.2043 - val_loss: 0.4473\n",
      "Epoch 50/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.1847 - loss: 0.7452 - val_accuracy: 0.2012 - val_loss: 0.4085\n",
      "Epoch 51/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 140ms/step - accuracy: 0.1847 - loss: 0.7281 - val_accuracy: 0.2042 - val_loss: 0.3721\n",
      "Epoch 52/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 141ms/step - accuracy: 0.1868 - loss: 0.6784 - val_accuracy: 0.2096 - val_loss: 0.3384\n",
      "Epoch 53/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.1874 - loss: 0.6605 - val_accuracy: 0.2118 - val_loss: 0.3085\n",
      "Epoch 54/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.1888 - loss: 0.6410 - val_accuracy: 0.2109 - val_loss: 0.3201\n",
      "Epoch 55/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 142ms/step - accuracy: 0.1927 - loss: 0.5939 - val_accuracy: 0.2110 - val_loss: 0.2998\n",
      "Epoch 56/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.1900 - loss: 0.6294 - val_accuracy: 0.2134 - val_loss: 0.2804\n",
      "Epoch 57/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.1935 - loss: 0.5696 - val_accuracy: 0.2077 - val_loss: 0.3048\n",
      "Epoch 58/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.1931 - loss: 0.5477 - val_accuracy: 0.2142 - val_loss: 0.2603\n",
      "Epoch 59/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.1935 - loss: 0.5508 - val_accuracy: 0.2115 - val_loss: 0.2633\n",
      "Epoch 60/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.1956 - loss: 0.5161 - val_accuracy: 0.2134 - val_loss: 0.2361\n",
      "Epoch 61/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.1980 - loss: 0.4971 - val_accuracy: 0.2153 - val_loss: 0.2378\n",
      "Epoch 62/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.1979 - loss: 0.4874 - val_accuracy: 0.2130 - val_loss: 0.1969\n",
      "Epoch 63/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.1990 - loss: 0.4793 - val_accuracy: 0.2165 - val_loss: 0.1840\n",
      "Epoch 64/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.2004 - loss: 0.4519 - val_accuracy: 0.2174 - val_loss: 0.1869\n",
      "Epoch 65/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.2017 - loss: 0.4290 - val_accuracy: 0.2140 - val_loss: 0.1639\n",
      "Epoch 66/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 134ms/step - accuracy: 0.2015 - loss: 0.4177 - val_accuracy: 0.2160 - val_loss: 0.1743\n",
      "Epoch 67/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.2033 - loss: 0.4045 - val_accuracy: 0.2189 - val_loss: 0.1442\n",
      "Epoch 68/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 140ms/step - accuracy: 0.2049 - loss: 0.3873 - val_accuracy: 0.2194 - val_loss: 0.1433\n",
      "Epoch 69/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.2054 - loss: 0.3731 - val_accuracy: 0.2171 - val_loss: 0.1399\n",
      "Epoch 70/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.2057 - loss: 0.3595 - val_accuracy: 0.2209 - val_loss: 0.1256\n",
      "Epoch 71/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 134ms/step - accuracy: 0.2066 - loss: 0.3641 - val_accuracy: 0.2184 - val_loss: 0.1270\n",
      "Epoch 72/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 141ms/step - accuracy: 0.2067 - loss: 0.3496 - val_accuracy: 0.2219 - val_loss: 0.1247\n",
      "Epoch 73/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 140ms/step - accuracy: 0.2062 - loss: 0.3456 - val_accuracy: 0.2223 - val_loss: 0.1131\n",
      "Epoch 74/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.2089 - loss: 0.3126 - val_accuracy: 0.2222 - val_loss: 0.1137\n",
      "Epoch 75/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.2087 - loss: 0.3107 - val_accuracy: 0.2216 - val_loss: 0.1017\n",
      "Epoch 76/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.2094 - loss: 0.3067 - val_accuracy: 0.2187 - val_loss: 0.1004\n",
      "Epoch 77/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 142ms/step - accuracy: 0.2092 - loss: 0.2920 - val_accuracy: 0.2240 - val_loss: 0.0899\n",
      "Epoch 78/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.2095 - loss: 0.2931 - val_accuracy: 0.2198 - val_loss: 0.0906\n",
      "Epoch 79/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 134ms/step - accuracy: 0.2107 - loss: 0.2840 - val_accuracy: 0.2231 - val_loss: 0.0929\n",
      "Epoch 80/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 142ms/step - accuracy: 0.2120 - loss: 0.2687 - val_accuracy: 0.2247 - val_loss: 0.0841\n",
      "Epoch 81/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.2119 - loss: 0.2747 - val_accuracy: 0.2213 - val_loss: 0.0907\n",
      "Epoch 82/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.2097 - loss: 0.2733 - val_accuracy: 0.2195 - val_loss: 0.0791\n",
      "Epoch 83/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.2112 - loss: 0.2632 - val_accuracy: 0.2278 - val_loss: 0.0691\n",
      "Epoch 84/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.2119 - loss: 0.2407 - val_accuracy: 0.2249 - val_loss: 0.0649\n",
      "Epoch 85/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.2126 - loss: 0.2321 - val_accuracy: 0.2237 - val_loss: 0.0556\n",
      "Epoch 86/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.2148 - loss: 0.2315 - val_accuracy: 0.2249 - val_loss: 0.0700\n",
      "Epoch 87/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 133ms/step - accuracy: 0.2140 - loss: 0.2268 - val_accuracy: 0.2247 - val_loss: 0.0612\n",
      "Epoch 88/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 134ms/step - accuracy: 0.2137 - loss: 0.2285 - val_accuracy: 0.2206 - val_loss: 0.0635\n",
      "Epoch 89/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m25s\u001b[0m 149ms/step - accuracy: 0.2132 - loss: 0.2359 - val_accuracy: 0.2229 - val_loss: 0.0544\n",
      "Epoch 90/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 139ms/step - accuracy: 0.2146 - loss: 0.2125 - val_accuracy: 0.2269 - val_loss: 0.0511\n",
      "Epoch 91/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 138ms/step - accuracy: 0.2156 - loss: 0.2071 - val_accuracy: 0.2216 - val_loss: 0.0458\n",
      "Epoch 92/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 134ms/step - accuracy: 0.2150 - loss: 0.2116 - val_accuracy: 0.2222 - val_loss: 0.0541\n",
      "Epoch 93/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 134ms/step - accuracy: 0.2160 - loss: 0.2146 - val_accuracy: 0.2256 - val_loss: 0.0581\n",
      "Epoch 94/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 140ms/step - accuracy: 0.2152 - loss: 0.2105 - val_accuracy: 0.2245 - val_loss: 0.0406\n",
      "Epoch 95/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.2167 - loss: 0.1900 - val_accuracy: 0.2260 - val_loss: 0.0473\n",
      "Epoch 96/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 134ms/step - accuracy: 0.2163 - loss: 0.1989 - val_accuracy: 0.2263 - val_loss: 0.0517\n",
      "Epoch 97/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 142ms/step - accuracy: 0.2166 - loss: 0.1877 - val_accuracy: 0.2272 - val_loss: 0.0374\n",
      "Epoch 98/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.2163 - loss: 0.1841 - val_accuracy: 0.2291 - val_loss: 0.0491\n",
      "Epoch 99/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 132ms/step - accuracy: 0.2179 - loss: 0.1670 - val_accuracy: 0.2249 - val_loss: 0.0402\n",
      "Epoch 100/100\n",
      "\u001b[1m167/167\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 141ms/step - accuracy: 0.2164 - loss: 0.1800 - val_accuracy: 0.2260 - val_loss: 0.0306\n"
     ]
    }
   ],
   "source": [
    "# 모델 컴파일\n",
    "model.compile(optimizer=optimizer, \n",
    "              loss=loss_function, \n",
    "              metrics=[tf.keras.metrics.SparseCategoricalAccuracy(name='accuracy')])\n",
    "\n",
    "# 모델 학습\n",
    "callbacks = [\n",
    "    tf.keras.callbacks.ModelCheckpoint('transformer_ckpt.h5', save_best_only=True),\n",
    "    tf.keras.callbacks.EarlyStopping(patience=5, restore_best_weights=True) # 안정적인 학습을 위해 patience 수정 (3->5)\n",
    "]\n",
    "\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    epochs=100,\n",
    "    validation_data=val_dataset,  \n",
    "    callbacks=callbacks\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "14eaf145",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T16:16:33.525032Z",
     "iopub.status.busy": "2025-10-14T16:16:33.524721Z",
     "iopub.status.idle": "2025-10-14T16:16:33.848855Z",
     "shell.execute_reply": "2025-10-14T16:16:33.848055Z"
    },
    "papermill": {
     "duration": 1.054079,
     "end_time": "2025-10-14T16:16:33.850041",
     "exception": false,
     "start_time": "2025-10-14T16:16:32.795962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# 학습 로그(history)에서 loss와 accuracy 가져오기\n",
    "train_loss = history.history['loss']\n",
    "train_acc = history.history['accuracy']\n",
    "\n",
    "val_loss = history.history.get('val_loss')\n",
    "val_acc = history.history.get('val_accuracy')\n",
    "\n",
    "epochs_range = range(1, len(train_loss) + 1)\n",
    "\n",
    "# Loss 시각화\n",
    "plt.figure(figsize=(12,5))\n",
    "plt.subplot(1,2,1)\n",
    "plt.plot(epochs_range, train_loss, label='Train Loss')\n",
    "if val_loss:\n",
    "    plt.plot(epochs_range, val_loss, label='Val Loss')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Loss over Epochs')\n",
    "plt.legend()\n",
    "\n",
    "# Accuracy 시각화\n",
    "plt.subplot(1,2,2)\n",
    "plt.plot(epochs_range, train_acc, label='Train Accuracy')\n",
    "if val_acc:\n",
    "    plt.plot(epochs_range, val_acc, label='Val Accuracy')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.title('Accuracy over Epochs')\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49b7b363",
   "metadata": {
    "papermill": {
     "duration": 0.788251,
     "end_time": "2025-10-14T16:16:35.494270",
     "exception": false,
     "start_time": "2025-10-14T16:16:34.706019",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "학습 이력\n",
    "\n",
    "1. epoch 20 설정 >> accuracy: 0.1352 - loss: 1.9847 - val_accuracy: 0.1540 - val_loss: 1.5961\n",
    "2. epoch 40 설정 >> accuracy: 0.2086 - loss: 0.3111 - val_accuracy: 0.2247 - val_loss: 0.0826\n",
    "    - epoch 37에서 학습 멈춤. 쳇봇 테스트 결과 엉망.\n",
    "3. epoch 100 설정 >> accuracy: 0.2222 - loss: 0.0688 - val_accuracy: 0.2250 - val_loss: 0.0042\n",
    "    - epoch 98에서 학습 멈춤. 여전히 쳇봇 테스트 결과는 엉망입니다.\n",
    "    - 교사학습을 사용했지만 여전히 모델 성능에 유의미한 결과를 얻기는 무리인 것 같아보입니다.\n",
    "    - 이에, 우선 sentence 전처리 함수를 보강하였습니다.\n",
    "4. 전처리 함수 보강 후 epoch 100회 학습 >> accuracy: 0.2154 - loss: 0.2265 - val_accuracy: 0.2264 - val_loss: 0.0479\n",
    "    - epoch 59에서 학습  멈춤.\n",
    "    - 여전히 쳇봇 테스트 결과는 모델 성능과 별개로 엉망입니다. \n",
    "5. LAYERS 8, D_MODEL 512 설정 >> accuracy: 0.2243 - loss: 0.0613 - val_accuracy: 0.2255 - val_loss: 0.0096\n",
    "    - epoch 69에서 학습 멈춤\n",
    "6. LAYERS 8, D_MODEL 256 설정 >> accuracy: 0.2259 - loss: 0.0320 - val_accuracy: 0.2287 - val_loss: 0.0040\n",
    "7. LAYERS 6, D_MODEL 512 설정 >> accuracy: 0.2049 - loss: 0.3943 - val_accuracy: 0.2159 - val_loss: 0.1373"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e66c75cd",
   "metadata": {
    "papermill": {
     "duration": 0.721396,
     "end_time": "2025-10-14T16:16:37.049497",
     "exception": false,
     "start_time": "2025-10-14T16:16:36.328101",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 5. 모델 평가하기\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e428422",
   "metadata": {
    "papermill": {
     "duration": 0.72872,
     "end_time": "2025-10-14T16:16:38.593436",
     "exception": false,
     "start_time": "2025-10-14T16:16:37.864716",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### LMS 버전 테스트 코드"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "97fed477",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T16:16:40.131037Z",
     "iopub.status.busy": "2025-10-14T16:16:40.130303Z",
     "iopub.status.idle": "2025-10-14T16:16:40.139643Z",
     "shell.execute_reply": "2025-10-14T16:16:40.139064Z"
    },
    "papermill": {
     "duration": 0.815415,
     "end_time": "2025-10-14T16:16:40.140711",
     "exception": false,
     "start_time": "2025-10-14T16:16:39.325296",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def decoder_inference(sentence):\n",
    "    sentence = preprocess_sentence(sentence)\n",
    "\n",
    "    # 입력 문장을 정수 인코딩 후 START/END 토큰 추가\n",
    "    sentence = tf.expand_dims(\n",
    "        tf.constant(START_TOKEN + tokenizer.encode(sentence) + END_TOKEN, dtype=tf.int32), axis=0\n",
    "    )\n",
    "\n",
    "    # 디코더 초기 입력\n",
    "    output_sequence = tf.expand_dims(tf.constant(START_TOKEN, dtype=tf.int32), 0)\n",
    "    MAX_LENGTH = 31\n",
    "    for i in range(MAX_LENGTH):\n",
    "        predictions = model(\n",
    "            inputs={'inputs': sentence, 'dec_inputs': output_sequence},\n",
    "            training=False\n",
    "        )\n",
    "        predictions = predictions[:, -1:, :]\n",
    "\n",
    "        predicted_id = tf.cast(tf.argmax(predictions, axis=-1), tf.int32)\n",
    "\n",
    "        if tf.equal(predicted_id, END_TOKEN[0]):\n",
    "            break\n",
    "\n",
    "        output_sequence = tf.concat([output_sequence, predicted_id], axis=-1)\n",
    "\n",
    "    return tf.squeeze(output_sequence, axis=0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "b104db05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T16:16:41.569847Z",
     "iopub.status.busy": "2025-10-14T16:16:41.569550Z",
     "iopub.status.idle": "2025-10-14T16:16:41.574650Z",
     "shell.execute_reply": "2025-10-14T16:16:41.573755Z"
    },
    "papermill": {
     "duration": 0.717406,
     "end_time": "2025-10-14T16:16:41.575815",
     "exception": false,
     "start_time": "2025-10-14T16:16:40.858409",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "슝=3\n"
     ]
    }
   ],
   "source": [
    "def sentence_generation(sentence):\n",
    "  # 입력 문장에 대해서 디코더를 동작 시켜 예측된 정수 시퀀스를 리턴받습니다.\n",
    "  prediction = decoder_inference(sentence)\n",
    "\n",
    "  # 정수 시퀀스를 다시 텍스트 시퀀스로 변환합니다.\n",
    "  predicted_sentence = tokenizer.decode(\n",
    "      [i for i in prediction if i < tokenizer.vocab_size])\n",
    "\n",
    "  print('입력 : {}'.format(sentence))\n",
    "  print('출력 : {}'.format(predicted_sentence))\n",
    "\n",
    "  return predicted_sentence\n",
    "print(\"슝=3\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "5df6f079",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T16:16:43.072254Z",
     "iopub.status.busy": "2025-10-14T16:16:43.071971Z",
     "iopub.status.idle": "2025-10-14T16:16:46.171475Z",
     "shell.execute_reply": "2025-10-14T16:16:46.170806Z"
    },
    "papermill": {
     "duration": 3.805323,
     "end_time": "2025-10-14T16:16:46.172564",
     "exception": false,
     "start_time": "2025-10-14T16:16:42.367241",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "입력 : 안녕\n",
      "출력 : \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "''"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sentence_generation('안녕')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ad080a90",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T16:16:47.683515Z",
     "iopub.status.busy": "2025-10-14T16:16:47.682815Z",
     "iopub.status.idle": "2025-10-14T16:16:47.977150Z",
     "shell.execute_reply": "2025-10-14T16:16:47.976461Z"
    },
    "papermill": {
     "duration": 1.008055,
     "end_time": "2025-10-14T16:16:47.978219",
     "exception": false,
     "start_time": "2025-10-14T16:16:46.970164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "입력 : 반가워\n",
      "출력 : \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "''"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sentence_generation('반가워')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "320fdd43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T16:16:49.524910Z",
     "iopub.status.busy": "2025-10-14T16:16:49.524657Z",
     "iopub.status.idle": "2025-10-14T16:16:49.829962Z",
     "shell.execute_reply": "2025-10-14T16:16:49.829316Z"
    },
    "papermill": {
     "duration": 1.046968,
     "end_time": "2025-10-14T16:16:49.830998",
     "exception": false,
     "start_time": "2025-10-14T16:16:48.784030",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "입력 : 안녕?\n",
      "출력 : \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "''"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sentence_generation('안녕?')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6ffb98da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T16:16:51.345986Z",
     "iopub.status.busy": "2025-10-14T16:16:51.345311Z",
     "iopub.status.idle": "2025-10-14T16:16:51.646740Z",
     "shell.execute_reply": "2025-10-14T16:16:51.646111Z"
    },
    "papermill": {
     "duration": 1.100851,
     "end_time": "2025-10-14T16:16:51.647831",
     "exception": false,
     "start_time": "2025-10-14T16:16:50.546980",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "입력 : 안녕 ㅠㅠ\n",
      "출력 : \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "''"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sentence_generation('안녕 ㅠㅠ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "b46e67f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T16:16:53.161404Z",
     "iopub.status.busy": "2025-10-14T16:16:53.161080Z",
     "iopub.status.idle": "2025-10-14T16:16:53.471569Z",
     "shell.execute_reply": "2025-10-14T16:16:53.470787Z"
    },
    "papermill": {
     "duration": 1.117809,
     "end_time": "2025-10-14T16:16:53.472749",
     "exception": false,
     "start_time": "2025-10-14T16:16:52.354940",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "입력 : 나랑 친구해줄래?\n",
      "출력 : \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "''"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sentence_generation('나랑 친구해줄래?')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bf58fc4",
   "metadata": {
    "papermill": {
     "duration": 0.794751,
     "end_time": "2025-10-14T16:16:54.976339",
     "exception": false,
     "start_time": "2025-10-14T16:16:54.181588",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### top-k 샘플링 및 반복 방지용 temperature 적용"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "5cd0a1ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T16:16:56.420775Z",
     "iopub.status.busy": "2025-10-14T16:16:56.420189Z",
     "iopub.status.idle": "2025-10-14T16:16:56.430619Z",
     "shell.execute_reply": "2025-10-14T16:16:56.430046Z"
    },
    "papermill": {
     "duration": 0.721738,
     "end_time": "2025-10-14T16:16:56.431755",
     "exception": false,
     "start_time": "2025-10-14T16:16:55.710017",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "\n",
    "def sentence_generation_advanced(sentence, max_length=31, temperature=1.0, top_k=50, top_p=0.9, repetition_penalty=1.2):\n",
    "    \"\"\"\n",
    "    입력 문장 -> 모델이 생성한 문장 반환\n",
    "    Args:\n",
    "        sentence (str): 입력 문장\n",
    "        max_length (int): 생성 최대 길이\n",
    "        temperature (float): 확률 분포 샤프닝\n",
    "        top_k (int): 상위 k개 단어만 고려\n",
    "        top_p (float): 누적 확률 top-p만 고려 (nucleus sampling)\n",
    "        repetition_penalty (float): 반복 단어 패널티 (>1: 반복 억제)\n",
    "    \"\"\"\n",
    "    \n",
    "    # 1️⃣ 문장 전처리\n",
    "    sentence = preprocess_sentence(sentence)\n",
    "    \n",
    "    # 2️⃣ 인코더 입력\n",
    "    encoder_input = tf.expand_dims(START_TOKEN + tokenizer.encode(sentence) + END_TOKEN, axis=0)\n",
    "    \n",
    "    # 3️⃣ 디코더 입력 초기화\n",
    "    decoder_input = tf.constant([START_TOKEN[0]], shape=(1,1), dtype=tf.int32)\n",
    "    \n",
    "    # 4️⃣ 생성된 단어 기록\n",
    "    generated_ids = [START_TOKEN[0]]\n",
    "    \n",
    "    for _ in range(max_length):\n",
    "        # 모델 호출\n",
    "        predictions = model(inputs={'inputs': encoder_input, 'dec_inputs': decoder_input}, training=False)\n",
    "        logits = predictions[:, -1, :].numpy().flatten()\n",
    "        \n",
    "        # 4-1️⃣ 반복 단어 패널티 적용\n",
    "        for token_id in set(generated_ids):\n",
    "            logits[token_id] /= repetition_penalty\n",
    "        \n",
    "        # 4-2️⃣ temperature 적용\n",
    "        logits = logits / temperature\n",
    "        \n",
    "        # 4-3️⃣ top-k 필터링\n",
    "        if top_k > 0:\n",
    "            indices_to_remove = logits < np.sort(logits)[-top_k]\n",
    "            logits[indices_to_remove] = -np.inf\n",
    "        \n",
    "        # 4-4️⃣ top-p(nucleus) 필터링\n",
    "        if top_p < 1.0:\n",
    "            sorted_indices = np.argsort(logits)[::-1]\n",
    "            sorted_logits = logits[sorted_indices]\n",
    "            cumulative_probs = np.cumsum(tf.nn.softmax(sorted_logits).numpy())\n",
    "            cutoff = np.where(cumulative_probs > top_p)[0]\n",
    "            if len(cutoff) > 0:\n",
    "                sorted_logits[cutoff[0]+1:] = -np.inf\n",
    "            # 원래 logits 배열에 반영\n",
    "            logits[sorted_indices] = sorted_logits\n",
    "        \n",
    "        # 4-5️⃣ 다음 단어 샘플링\n",
    "        probs = tf.nn.softmax(logits).numpy()\n",
    "        next_token = np.random.choice(len(probs), p=probs)\n",
    "        \n",
    "        # 종료 토큰이면 종료\n",
    "        if next_token == END_TOKEN[0]:\n",
    "            break\n",
    "        \n",
    "        # 디코더 입력 업데이트\n",
    "        decoder_input = tf.concat([decoder_input, [[next_token]]], axis=-1)\n",
    "        generated_ids.append(next_token)\n",
    "    \n",
    "    # 5️⃣ START/END 토큰 제거 후 디코딩\n",
    "    predicted_sequence = [idx for idx in generated_ids if idx not in START_TOKEN + END_TOKEN]\n",
    "    predicted_sentence = tokenizer.decode(predicted_sequence)\n",
    "    \n",
    "    return predicted_sentence\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a6340e00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T16:16:57.937980Z",
     "iopub.status.busy": "2025-10-14T16:16:57.937176Z",
     "iopub.status.idle": "2025-10-14T16:16:59.773267Z",
     "shell.execute_reply": "2025-10-14T16:16:59.772312Z"
    },
    "papermill": {
     "duration": 2.551341,
     "end_time": "2025-10-14T16:16:59.774552",
     "exception": false,
     "start_time": "2025-10-14T16:16:57.223211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "입력 : 안녕\n",
      "출력 : \n",
      "--------------------------------------------------\n",
      "입력 : 나랑 친구해줄래?\n",
      "출력 : 쥐\n",
      "--------------------------------------------------\n",
      "입력 : 오늘 기분 어때?\n",
      "출력 : \n",
      "--------------------------------------------------\n",
      "입력 : 너는 뭐하고 있어?\n",
      "출력 : \n",
      "--------------------------------------------------\n",
      "입력 : 재밌는 영화 추천해줄래?\n",
      "출력 : \n",
      "--------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "# 테스트 입력 문장\n",
    "test_sentences = [\n",
    "    \"안녕\",\n",
    "    \"나랑 친구해줄래?\",\n",
    "    \"오늘 기분 어때?\",\n",
    "    \"너는 뭐하고 있어?\",\n",
    "    \"재밌는 영화 추천해줄래?\"\n",
    "]\n",
    "\n",
    "# 생성 문장 출력\n",
    "for sentence in test_sentences:\n",
    "    predicted = sentence_generation_advanced(\n",
    "        sentence,\n",
    "        max_length=31,\n",
    "        temperature=0.8,\n",
    "        top_k=50,\n",
    "        top_p=0.9,\n",
    "        repetition_penalty=1.2\n",
    "    )\n",
    "    print(\"입력 :\", sentence)\n",
    "    print(\"출력 :\", predicted)\n",
    "    print(\"-\"*50)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "272cbade",
   "metadata": {
    "papermill": {
     "duration": 0.710115,
     "end_time": "2025-10-14T16:17:01.299994",
     "exception": false,
     "start_time": "2025-10-14T16:17:00.589879",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "총평\n",
    "\n",
    "- 보다 일반적인 결과를 보고자 custom으로 구현한 방식이 아닌 keras 내장함수를 활용하여 챗봇 만들기를 진행하였습니다.\n",
    "- 배운 지식을 토대로 다양한 방식으로 학습을 시도했지만, 틀린 정답을 반복적으로 학습하는 모습을 관찰했습니다.\n",
    "- 이번 경험을 통해 교사학습(Supervised Learning)의 필요성을 직접 체감할 수 있었습니다.\n",
    "- 혼자 실험을 진행하며 학습이 원활하지 않았던 이유로는 다음과 같은 가능성을 생각해볼 수 있습니다:\n",
    "    - 한국어의 교착어 특성 때문에 subword 기반 토큰화가 항상 적절하지 않을 수 있음\n",
    "    - 데이터셋 품질이나 양의 문제도 학습 성능에 영향을 미쳤을 가능성\n",
    "- 향후에는 데이터 전처리 개선, 토큰화 전략 다양화, 그리고 teacher forcing을 활용한 학습을 시도해 보는 것이 필요할 것 같습니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e57bf11",
   "metadata": {
    "papermill": {
     "duration": 0.732536,
     "end_time": "2025-10-14T16:17:02.838400",
     "exception": false,
     "start_time": "2025-10-14T16:17:02.105864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "provenance": [],
   "toc_visible": true
  },
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [],
   "dockerImageVersionId": 31154,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2612.73041,
   "end_time": "2025-10-14T16:17:07.509895",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-14T15:33:34.779485",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
